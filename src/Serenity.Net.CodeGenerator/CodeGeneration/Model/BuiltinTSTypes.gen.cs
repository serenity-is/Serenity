// Auto generated by TSTypeListerASTTests.BuiltinTSTypesGenerator, don't modify!
namespace Serenity.CodeGeneration;

public class BuiltinTSTypes
{
    public static readonly ExternalType[] All = new ExternalType[]
    {
        new() { Name = "AggregateFormatting", IsInterface = true },
        new() { Name = "Aggregators", IsInterface = true },
        new() { Name = "ArgumentNullException", BaseType = "Exception" },
        new() { Name = "Authorization", IsInterface = true },
        new() { Name = "AutoNumeric" },
        new() { Name = "AutoNumericOptions", IsInterface = true, Fields = [ new() { Name = "aDec", Type = "string" }, new() { Name = "allowedAutoStrip", Type = "RegExp" }, new() { Name = "allowLeading", Type = "boolean" }, new() { Name = "altDec", Type = "string" }, new() { Name = "aForm", Type = "boolean" }, new() { Name = "aNum", Type = "string" }, new() { Name = "aNeg", Type = "string" }, new() { Name = "aSep", Type = "string" }, new() { Name = "aSign", Type = "string" }, new() { Name = "aNegRegAutoStrip", Type = "string" }, new() { Name = "aPad", Type = "boolean" }, new() { Name = "dGroup", Type = "string" }, new() { Name = "holder" }, new() { Name = "lZero", Type = "string" }, new() { Name = "mDec", Type = "number" }, new() { Name = "mInt", Type = "number" }, new() { Name = "mRound", Type = "string" }, new() { Name = "nBracket", Type = "string" }, new() { Name = "numRegAutoStrip", Type = "RegExp" }, new() { Name = "oEvent" }, new() { Name = "pSign", Type = "string" }, new() { Name = "runOnce", Type = "boolean" }, new() { Name = "skipFirstAutoStrip", Type = "RegExp" }, new() { Name = "skipLastAutoStrip", Type = "RegExp" }, new() { Name = "tagList", Type = "string[]" }, new() { Name = "vMax" }, new() { Name = "vMin" }, new() { Name = "wEmpty", Type = "string" } ] },
        new() { Name = "BaseDialog", BaseType = "Widget", Fields = [ new() { Name = "tabs", Type = "Fluent" }, new() { Name = "toolbar", Type = "Toolbar" }, new() { Name = "validator" }, new() { Name = "dialog", Type = "Dialog" } ], GenericParameters = [ new() { Name = "P" } ] },
        new() { Name = "BaseEditorFiltering", BaseType = "BaseFiltering", IsAbstract = true, Fields = [ new() { Name = "editorTypeRef" }, new() { Name = "editor", Type = "TEditor" } ], GenericParameters = [ new() { Name = "TEditor", Extends = "Widget" } ] },
        new() { Name = "BaseFiltering", IsAbstract = true, Interfaces = [ "IFiltering", "IQuickFiltering" ], Fields = [ new() { Name = "field" }, new() { Name = "container" }, new() { Name = "operator" } ] },
        new() { Name = "BasePanel", BaseType = "Widget", Fields = [ new() { Name = "tabs", Type = "Fluent" }, new() { Name = "toolbar", Type = "Toolbar" }, new() { Name = "validator", Type = "Validator" }, new() { Name = "isPanel", Type = "boolean" }, new() { Name = "responsive", Type = "boolean" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "BooleanEditor", BaseType = "EditorWidget", Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "BooleanFiltering", BaseType = "BaseFiltering" },
        new() { Name = "BooleanFormatter", Interfaces = [ "Formatter" ], Fields = [ new() { Name = "props", Type = "{\"falseText\":\"string\",\"trueText\":\"string\"}" } ] },
        new() { Name = "CaptureOperationType" },
        new() { Name = "CascadedWidgetLink", Fields = [ new() { Name = "parentType" }, new() { Name = "widget" }, new() { Name = "parentChange" }, new() { Name = "_parentID" } ], GenericParameters = [ new() { Name = "TParent", Extends = "Widget" } ] },
        new() { Name = "CategoryAttribute", Fields = [ new() { Name = "category", Type = "string" } ] },
        new() { Name = "CheckboxFormatter", Interfaces = [ "Formatter" ], Fields = [ new() { Name = "typeInfo", Type = "FormatterTypeInfo", IsStatic = true } ] },
        new() { Name = "CheckLookupEditor", BaseType = "CheckTreeEditor", Fields = [ new() { Name = "searchText" }, new() { Name = "enableUpdateItems" }, new() { Name = "lookupChangeUnbind" }, new() { Name = "cascadeLink", Type = "CascadedWidgetLink" } ], GenericParameters = [ new() { Name = "TItem", Extends = "CheckTreeItem", Default = "any" }, new() { Name = "P", Extends = "CheckLookupEditorOptions", Default = "CheckLookupEditorOptions" } ] },
        new() { Name = "CheckLookupEditorOptions", IsInterface = true, Fields = [ new() { Name = "lookupKey", Type = "string" }, new() { Name = "checkedOnTop", Type = "boolean" }, new() { Name = "showSelectAll", Type = "boolean" }, new() { Name = "hideSearch", Type = "boolean" }, new() { Name = "delimited", Type = "boolean" }, new() { Name = "cascadeFrom", Type = "string" }, new() { Name = "cascadeField", Type = "string" }, new() { Name = "cascadeValue" }, new() { Name = "filterField", Type = "string" }, new() { Name = "filterValue" } ] },
        new() { Name = "CheckTreeEditor", BaseType = "DataGrid", Interfaces = [ "IGetEditValue", "ISetEditValue", "IReadOnly" ], Fields = [ new() { Name = "itemById" }, new() { Name = "_readOnly" }, new() { Name = "get_value" }, new() { Name = "set_value" } ], GenericParameters = [ new() { Name = "TItem", Extends = "CheckTreeItem" }, new() { Name = "P", Default = "{}" } ] },
        new() { Name = "CheckTreeItem", IsInterface = true, Fields = [ new() { Name = "isSelected", Type = "boolean" }, new() { Name = "hideCheckBox", Type = "boolean" }, new() { Name = "isAllDescendantsSelected", Type = "boolean" }, new() { Name = "id", Type = "string" }, new() { Name = "text", Type = "string" }, new() { Name = "parentId", Type = "string" }, new() { Name = "children", Type = "CheckTreeItem<TSource>[]" }, new() { Name = "source", Type = "TSource" } ], GenericParameters = [ new() { Name = "TSource" } ] },
        new() { Name = "CKEditorConfig", IsInterface = true },
        new() { Name = "CloseButtonAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "Column", IsInterface = true, Fields = [ new() { Name = "referencedFields", Type = "string[]" }, new() { Name = "sourceItem", Type = "PropertyItem" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "ColumnPickerDialog", BaseType = "BaseDialog", Fields = [ new() { Name = "ulVisible" }, new() { Name = "ulHidden" }, new() { Name = "colById" }, new() { Name = "allColumns", Type = "Column[]" }, new() { Name = "visibleColumns", Type = "string[]" }, new() { Name = "defaultColumns", Type = "string[]" }, new() { Name = "done" }, new() { Name = "getTitle" }, new() { Name = "allowHide" }, new() { Name = "createLI" }, new() { Name = "updateListStates" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "ColumnsBase", GenericParameters = [ new() { Name = "TRow", Default = "any" } ] },
        new() { Name = "ColumnSelection" },
        new() { Name = "ColumnsKeyAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "Combobox", Fields = [ new() { Name = "el" }, new() { Name = "defaults", Type = "ComboboxOptions", IsStatic = true }, new() { Name = "createSelect2" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "ComboboxCommonOptions", IsInterface = true, Fields = [ new() { Name = "allowClear", Type = "boolean" }, new() { Name = "delimited", Type = "boolean" }, new() { Name = "minimumResultsForSearch" }, new() { Name = "multiple", Type = "boolean" } ] },
        new() { Name = "ComboboxEditor", BaseType = "EditorWidget", Interfaces = [ "ISetEditValue", "IGetEditValue", "IStringValue", "IReadOnly" ], Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" }, new() { Name = "combobox" }, new() { Name = "_items" }, new() { Name = "_itemById" }, new() { Name = "lastCreateTerm", Type = "string" }, new() { Name = "updateInplaceReadOnly" }, new() { Name = "cascadeLink", Type = "CascadedWidgetLink" }, new() { Name = "onInitNewEntity" }, new() { Name = "openDialogAsPanel", Type = "boolean" } ], GenericParameters = [ new() { Name = "P" }, new() { Name = "TItem" } ] },
        new() { Name = "ComboboxEditorOptions", IsInterface = true, Interfaces = [ "ComboboxFilterOptions", "ComboboxInplaceAddOptions", "ComboboxCommonOptions" ] },
        new() { Name = "ComboboxFilterOptions", IsInterface = true, Fields = [ new() { Name = "cascadeFrom", Type = "string" }, new() { Name = "cascadeField", Type = "string" }, new() { Name = "cascadeValue" }, new() { Name = "filterField", Type = "string" }, new() { Name = "filterValue" } ] },
        new() { Name = "ComboboxInplaceAddOptions", IsInterface = true, Fields = [ new() { Name = "inplaceAdd", Type = "boolean" }, new() { Name = "inplaceAddPermission", Type = "string" }, new() { Name = "dialogType", Type = "string" }, new() { Name = "autoComplete", Type = "boolean" } ] },
        new() { Name = "ComboboxItem", IsInterface = true, Fields = [ new() { Name = "id", Type = "string" }, new() { Name = "text", Type = "string" }, new() { Name = "source", Type = "TSource" }, new() { Name = "disabled", Type = "boolean" } ], GenericParameters = [ new() { Name = "TSource", Default = "any" } ] },
        new() { Name = "ComboboxOptions", IsInterface = true, Fields = [ new() { Name = "allowClear", Type = "boolean" }, new() { Name = "createSearchChoice" }, new() { Name = "element" }, new() { Name = "arbitraryValues", Type = "boolean" }, new() { Name = "formatSelection" }, new() { Name = "formatResult" }, new() { Name = "minimumResultsForSearch", Type = "number" }, new() { Name = "multiple", Type = "boolean" }, new() { Name = "pageSize", Type = "number" }, new() { Name = "placeholder", Type = "string" }, new() { Name = "providerOptions" }, new() { Name = "search" }, new() { Name = "typeDelay", Type = "number" } ], GenericParameters = [ new() { Name = "TSource", Default = "any" } ] },
        new() { Name = "ComboboxSearchQuery", IsInterface = true, Fields = [ new() { Name = "searchTerm", Type = "string" }, new() { Name = "idList", Type = "string[]" }, new() { Name = "skip", Type = "number" }, new() { Name = "take", Type = "number" }, new() { Name = "checkMore", Type = "boolean" }, new() { Name = "initSelection", Type = "boolean" }, new() { Name = "signal", Type = "AbortSignal" } ] },
        new() { Name = "ComboboxSearchResult", IsInterface = true, Fields = [ new() { Name = "items", Type = "TItem[]" }, new() { Name = "more", Type = "boolean" } ], GenericParameters = [ new() { Name = "TItem" } ] },
        new() { Name = "ConfirmDialogOptions", IsInterface = true, Interfaces = [ "MessageDialogOptions" ], Fields = [ new() { Name = "cancelButton", Type = "boolean" }, new() { Name = "onCancel" }, new() { Name = "onNo" } ] },
        new() { Name = "CreateWidgetParams", IsInterface = true, Fields = [ new() { Name = "type", Type = "{\"prototype\":\"TWidget\"}" }, new() { Name = "options", Type = "[\"P\",\"WidgetProps\"]" }, new() { Name = "container" }, new() { Name = "element" }, new() { Name = "init" } ], GenericParameters = [ new() { Name = "TWidget", Extends = "Widget" }, new() { Name = "P" } ] },
        new() { Name = "Criteria", IsInterface = true },
        new() { Name = "CriteriaBuilder", BaseType = "Array" },
        new() { Name = "CriteriaOperator" },
        new() { Name = "CriteriaWithText", IsInterface = true, Fields = [ new() { Name = "criteria", Type = "any[]" }, new() { Name = "displayText", Type = "string" } ] },
        new() { Name = "CssClassAttribute", Fields = [ new() { Name = "cssClass", Type = "string" } ] },
        new() { Name = "DataChangeInfo", IsInterface = true, Interfaces = [ "Event" ], Fields = [ new() { Name = "operationType", Type = "string" }, new() { Name = "entityId" }, new() { Name = "entity" } ] },
        new() { Name = "DataGrid", BaseType = "Widget", Interfaces = [ "IDataGrid", "IReadOnly" ], Fields = [ new() { Name = "_isDisabled" }, new() { Name = "_layoutTimer" }, new() { Name = "_slickGridOnSort" }, new() { Name = "_slickGridOnClick" }, new() { Name = "titleDiv", Type = "Fluent" }, new() { Name = "toolbar", Type = "Toolbar" }, new() { Name = "filterBar", Type = "FilterDisplayBar" }, new() { Name = "quickFiltersDiv", Type = "Fluent" }, new() { Name = "quickFiltersBar", Type = "QuickFilterBar" }, new() { Name = "slickContainer", Type = "Fluent" }, new() { Name = "allColumns", Type = "Column[]" }, new() { Name = "propertyItemsData", Type = "PropertyItemsData" }, new() { Name = "initialSettings", Type = "PersistedGridSettings" }, new() { Name = "restoringSettings", Type = "number" }, new() { Name = "view", Type = "RemoteView" }, new() { Name = "slickGrid", Type = "@serenity-is/sleekgrid:Grid" }, new() { Name = "openDialogsAsPanel", Type = "boolean" }, new() { Name = "defaultRowHeight", Type = "number", IsStatic = true }, new() { Name = "defaultHeaderHeight", Type = "number", IsStatic = true }, new() { Name = "defaultPersistanceStorage", Type = "SettingStorage", IsStatic = true }, new() { Name = "defaultColumnWidthScale", Type = "number", IsStatic = true }, new() { Name = "defaultColumnWidthDelta", Type = "number", IsStatic = true }, new() { Name = "_readonly" }, new() { Name = "_localTextDbPrefix" }, new() { Name = "_idProperty" }, new() { Name = "_isActiveProperty" } ], GenericParameters = [ new() { Name = "TItem" }, new() { Name = "P", Default = "{}" } ] },
        new() { Name = "DateEditor", BaseType = "EditorWidget", Interfaces = [ "IStringValue", "IReadOnly" ], Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" }, new() { Name = "get_valueAsDate" }, new() { Name = "set_valueAsDate" }, new() { Name = "dateInputChange", IsStatic = true }, new() { Name = "useFlatpickr", Type = "boolean", IsStatic = true } ], GenericParameters = [ new() { Name = "P", Extends = "DateEditorOptions", Default = "DateEditorOptions" } ] },
        new() { Name = "DateEditorOptions", IsInterface = true, Fields = [ new() { Name = "yearRange", Type = "string" }, new() { Name = "minValue", Type = "string" }, new() { Name = "maxValue", Type = "string" }, new() { Name = "sqlMinMax", Type = "boolean" } ] },
        new() { Name = "DateFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "DateFormat", IsInterface = true, Fields = [ new() { Name = "dateSeparator", Type = "string" }, new() { Name = "dateFormat", Type = "string" }, new() { Name = "dateOrder", Type = "string" }, new() { Name = "dateTimeFormat", Type = "string" }, new() { Name = "amDesignator", Type = "string" }, new() { Name = "pmDesignator", Type = "string" }, new() { Name = "timeSeparator", Type = "string" }, new() { Name = "firstDayOfWeek", Type = "number" }, new() { Name = "dayNames", Type = "string[]" }, new() { Name = "shortDayNames", Type = "string[]" }, new() { Name = "minimizedDayNames", Type = "string[]" }, new() { Name = "monthNames", Type = "string[]" }, new() { Name = "shortMonthNames", Type = "string[]" } ] },
        new() { Name = "DateFormatter", Interfaces = [ "Formatter" ], Fields = [ new() { Name = "props", Type = "{\"displayFormat\":\"string\"}" } ] },
        new() { Name = "DateTimeEditor", BaseType = "EditorWidget", Interfaces = [ "IStringValue", "IReadOnly" ], Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" }, new() { Name = "time" }, new() { Name = "lastSetValue" }, new() { Name = "lastSetValueGet" }, new() { Name = "getInplaceNowText" }, new() { Name = "getDisplayFormat" }, new() { Name = "get_valueAsDate" }, new() { Name = "set_valueAsDate" }, new() { Name = "getTimeOptions", IsStatic = true } ], GenericParameters = [ new() { Name = "P", Extends = "DateTimeEditorOptions", Default = "DateTimeEditorOptions" } ] },
        new() { Name = "DateTimeEditorOptions", IsInterface = true, Fields = [ new() { Name = "startHour" }, new() { Name = "endHour" }, new() { Name = "intervalMinutes" }, new() { Name = "minValue", Type = "string" }, new() { Name = "maxValue", Type = "string" }, new() { Name = "yearRange", Type = "string" }, new() { Name = "useUtc", Type = "boolean" }, new() { Name = "seconds", Type = "boolean" }, new() { Name = "inputOnly", Type = "boolean" } ] },
        new() { Name = "DateTimeFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "DateTimeFormatter", BaseType = "DateFormatter" },
        new() { Name = "DateYearEditor", BaseType = "SelectEditor", GenericParameters = [ new() { Name = "P", Extends = "DateYearEditorOptions", Default = "DateYearEditorOptions" } ] },
        new() { Name = "DateYearEditorOptions", IsInterface = true, Interfaces = [ "SelectEditorOptions" ], Fields = [ new() { Name = "minYear", Type = "string" }, new() { Name = "maxYear", Type = "string" }, new() { Name = "descending", Type = "boolean" } ] },
        new() { Name = "DebouncedFunction", IsInterface = true, GenericParameters = [ new() { Name = "T" } ] },
        new() { Name = "DecimalEditor", BaseType = "EditorWidget", Interfaces = [ "IDoubleValue" ], Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Extends = "DecimalEditorOptions", Default = "DecimalEditorOptions" } ] },
        new() { Name = "DecimalEditorOptions", IsInterface = true, Fields = [ new() { Name = "minValue", Type = "string" }, new() { Name = "maxValue", Type = "string" }, new() { Name = "decimals" }, new() { Name = "padDecimals" }, new() { Name = "allowNegatives", Type = "boolean" } ] },
        new() { Name = "DecimalFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "Decorators", IsInterface = true },
        new() { Name = "DefaultValueAttribute", Fields = [ new() { Name = "value" } ] },
        new() { Name = "DeleteRequest", IsInterface = true, Interfaces = [ "ServiceRequest" ], Fields = [ new() { Name = "EntityId" } ] },
        new() { Name = "DeleteResponse", IsInterface = true, Interfaces = [ "ServiceResponse" ] },
        new() { Name = "Dialog", Fields = [ new() { Name = "el" }, new() { Name = "dialogResult" }, new() { Name = "defaults", Type = "DialogOptions", IsStatic = true }, new() { Name = "messageDefaults", Type = "MessageDialogOptions", IsStatic = true }, new() { Name = "onButtonClick" }, new() { Name = "createBSButtons" }, new() { Name = "createBSModal" }, new() { Name = "createPanel" }, new() { Name = "createUIDialog" } ] },
        new() { Name = "DialogButton", IsInterface = true, Fields = [ new() { Name = "text", Type = "string" }, new() { Name = "hint", Type = "string" }, new() { Name = "icon", Type = "IconClassName" }, new() { Name = "click" }, new() { Name = "cssClass", Type = "string" }, new() { Name = "result", Type = "string" } ] },
        new() { Name = "DialogExtensions", IsInterface = true },
        new() { Name = "DialogOptions", IsInterface = true, Fields = [ new() { Name = "autoDispose", Type = "boolean" }, new() { Name = "autoOpen", Type = "boolean" }, new() { Name = "backdrop" }, new() { Name = "buttons", Type = "DialogButton[]" }, new() { Name = "centered", Type = "boolean" }, new() { Name = "closeButton", Type = "boolean" }, new() { Name = "closeOnEscape", Type = "boolean" }, new() { Name = "dialogClass", Type = "string" }, new() { Name = "element" }, new() { Name = "fade", Type = "boolean" }, new() { Name = "fullScreen" }, new() { Name = "modal", Type = "boolean" }, new() { Name = "onOpen" }, new() { Name = "onClose" }, new() { Name = "preferBSModal", Type = "boolean" }, new() { Name = "preferPanel", Type = "boolean" }, new() { Name = "providerOptions" }, new() { Name = "scrollable", Type = "boolean" }, new() { Name = "size" }, new() { Name = "title", Type = "string" }, new() { Name = "width", Type = "number" } ] },
        new() { Name = "DialogTexts", IsInterface = true },
        new() { Name = "DialogTypeAttribute", Fields = [ new() { Name = "value" } ] },
        new() { Name = "DialogTypeRegistry", IsInterface = true },
        new() { Name = "DisplayNameAttribute", Fields = [ new() { Name = "displayName", Type = "string" } ] },
        new() { Name = "EditorAttribute" },
        new() { Name = "EditorFiltering", BaseType = "BaseEditorFiltering", Fields = [ new() { Name = "props", Type = "{\"editorType\":\"string\",\"useRelative\":\"boolean\",\"useLike\":\"boolean\"}" } ] },
        new() { Name = "EditorOptionAttribute", Fields = [ new() { Name = "key", Type = "string" }, new() { Name = "value" } ] },
        new() { Name = "EditorType", IsInterface = true },
        new() { Name = "EditorTypeAttribute", BaseType = "EditorTypeAttributeBase" },
        new() { Name = "EditorTypeAttributeBase", Fields = [ new() { Name = "editorType", Type = "string" } ] },
        new() { Name = "EditorTypeRegistry", IsInterface = true },
        new() { Name = "EditorUtils", IsInterface = true },
        new() { Name = "EditorWidget", BaseType = "Widget", Fields = [ new() { Name = "typeInfo", Type = "ClassTypeInfo", IsStatic = true } ], GenericParameters = [ new() { Name = "P" } ] },
        new() { Name = "ElementAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "EmailAddressEditor", BaseType = "StringEditor", GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "EmailEditor", BaseType = "EditorWidget", Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" }, new() { Name = "domain" } ], GenericParameters = [ new() { Name = "P", Extends = "EmailEditorOptions", Default = "EmailEditorOptions" } ] },
        new() { Name = "EmailEditorOptions", IsInterface = true, Fields = [ new() { Name = "domain", Type = "string" }, new() { Name = "readOnlyDomain", Type = "boolean" } ] },
        new() { Name = "EntityDialog", BaseType = "BaseDialog", Interfaces = [ "IEditDialog", "IReadOnly" ], Fields = [ new() { Name = "_entity" }, new() { Name = "_entityId" }, new() { Name = "propertyItemsData", Type = "PropertyItemsData" }, new() { Name = "propertyGrid", Type = "PropertyGrid" }, new() { Name = "saveAndCloseButton", Type = "Fluent" }, new() { Name = "applyChangesButton", Type = "Fluent" }, new() { Name = "deleteButton", Type = "Fluent" }, new() { Name = "undeleteButton", Type = "Fluent" }, new() { Name = "cloneButton", Type = "Fluent" }, new() { Name = "editButton", Type = "Fluent" }, new() { Name = "localizer", Type = "EntityLocalizer" }, new() { Name = "localizerButton", Type = "Fluent" }, new() { Name = "_entityType" }, new() { Name = "_formKey" }, new() { Name = "_localTextDbPrefix" }, new() { Name = "_entitySingular" }, new() { Name = "_nameProperty" }, new() { Name = "_idProperty" }, new() { Name = "_isActiveProperty" }, new() { Name = "_service" }, new() { Name = "_readonly" }, new() { Name = "editClicked", Type = "boolean" } ], GenericParameters = [ new() { Name = "TItem" }, new() { Name = "P", Default = "{}" } ] },
        new() { Name = "EntityGrid", BaseType = "DataGrid", Fields = [ new() { Name = "_entityType" }, new() { Name = "_displayName" }, new() { Name = "_itemName" }, new() { Name = "_service" }, new() { Name = "_dialogType" } ], GenericParameters = [ new() { Name = "TItem" }, new() { Name = "P", Default = "{}" } ] },
        new() { Name = "EntityLocalizer", Fields = [ new() { Name = "grid", Type = "PropertyGrid" }, new() { Name = "pendingValue" }, new() { Name = "lastValue" }, new() { Name = "targetLanguage", Type = "HTMLSelectElement" }, new() { Name = "options" } ] },
        new() { Name = "EntityLocalizerOptions", IsInterface = true, Fields = [ new() { Name = "byId" }, new() { Name = "idPrefix", Type = "string" }, new() { Name = "isNew" }, new() { Name = "getButton" }, new() { Name = "getEntity" }, new() { Name = "getLanguages" }, new() { Name = "getPropertyGrid" }, new() { Name = "getToolButtons" }, new() { Name = "pgOptions", Type = "PropertyGridOptions" }, new() { Name = "retrieveLocalizations" }, new() { Name = "validateForm" } ] },
        new() { Name = "EntityTypeAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "Enum", IsInterface = true },
        new() { Name = "EnumEditor", BaseType = "ComboboxEditor", GenericParameters = [ new() { Name = "P", Extends = "EnumEditorOptions", Default = "EnumEditorOptions" } ] },
        new() { Name = "EnumEditorOptions", IsInterface = true, Interfaces = [ "ComboboxCommonOptions" ], Fields = [ new() { Name = "enumKey", Type = "string" }, new() { Name = "enumType" } ] },
        new() { Name = "EnumFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "EnumFormatter", Interfaces = [ "Formatter" ], Fields = [ new() { Name = "props", Type = "{\"enumKey\":\"string\"}" } ] },
        new() { Name = "EnumKeyAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "EnumTypeRegistry", IsInterface = true },
        new() { Name = "ErrorHandling", IsInterface = true },
        new() { Name = "Exception", BaseType = "Error" },
        new() { Name = "FileDownloadFormatter", Interfaces = [ "Formatter", "IInitializeColumn" ], Fields = [ new() { Name = "props", Type = "{\"displayFormat\":\"string\",\"originalNameProperty\":\"string\",\"iconClass\":\"string\"}" } ] },
        new() { Name = "FileUploadConstraints", IsInterface = true, Fields = [ new() { Name = "minWidth", Type = "number" }, new() { Name = "maxWidth", Type = "number" }, new() { Name = "minHeight", Type = "number" }, new() { Name = "maxHeight", Type = "number" }, new() { Name = "minSize", Type = "number" }, new() { Name = "maxSize", Type = "number" }, new() { Name = "allowNonImage", Type = "boolean" }, new() { Name = "originalNameProperty", Type = "string" } ] },
        new() { Name = "FileUploadEditor", BaseType = "EditorWidget", Interfaces = [ "IReadOnly", "IGetEditValue", "ISetEditValue", "IValidateRequired" ], Fields = [ new() { Name = "entity", Type = "UploadedFile" }, new() { Name = "toolbar", Type = "Toolbar" }, new() { Name = "progress", Type = "HTMLElement" }, new() { Name = "fileSymbols", Type = "HTMLElement" }, new() { Name = "uploadInput", Type = "Fluent" }, new() { Name = "hiddenInput", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Extends = "FileUploadEditorOptions", Default = "FileUploadEditorOptions" } ] },
        new() { Name = "FileUploadEditorOptions", IsInterface = true, Interfaces = [ "FileUploadConstraints" ], Fields = [ new() { Name = "displayFileName", Type = "boolean" }, new() { Name = "uploadIntent", Type = "string" }, new() { Name = "uploadUrl", Type = "string" }, new() { Name = "urlPrefix", Type = "string" } ] },
        new() { Name = "FilterableAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "FilterDialog", BaseType = "BaseDialog", Fields = [ new() { Name = "filterPanel" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "FilterDisplayBar", BaseType = "FilterWidgetBase", GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "FilterFieldSelectOptions", IsInterface = true, Fields = [ new() { Name = "fields", Type = "PropertyItem[]" } ] },
        new() { Name = "FilteringTypeRegistry", IsInterface = true },
        new() { Name = "FilterLine", IsInterface = true, Fields = [ new() { Name = "field", Type = "string" }, new() { Name = "operator", Type = "string" }, new() { Name = "isOr", Type = "boolean" }, new() { Name = "leftParen", Type = "boolean" }, new() { Name = "rightParen", Type = "boolean" }, new() { Name = "validationError", Type = "string" }, new() { Name = "criteria", Type = "any[]" }, new() { Name = "displayText", Type = "string" }, new() { Name = "state" } ] },
        new() { Name = "FilterOperator", IsInterface = true, Fields = [ new() { Name = "key", Type = "string" }, new() { Name = "title", Type = "string" }, new() { Name = "format", Type = "string" } ] },
        new() { Name = "FilterOperators", IsInterface = true },
        new() { Name = "FilterPanel", BaseType = "FilterWidgetBase", Fields = [ new() { Name = "rowsDiv" }, new() { Name = "resetButton" }, new() { Name = "searchButton" }, new() { Name = "_showInitialLine" }, new() { Name = "_showSearchButton" }, new() { Name = "updateStoreOnReset", Type = "boolean" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "FilterStore", Fields = [ new() { Name = "changed" }, new() { Name = "displayText" }, new() { Name = "fields" }, new() { Name = "fieldByName" }, new() { Name = "items" } ] },
        new() { Name = "FilterWidgetBase", BaseType = "Widget", Fields = [ new() { Name = "store" }, new() { Name = "onFilterStoreChanged" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "FlexifyAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "Fluent", IsInterface = true, Interfaces = [ "ArrayLike" ], Fields = [ new() { Name = "length", Type = "number" } ], GenericParameters = [ new() { Name = "TElement", Extends = "HTMLElement", Default = "HTMLElement" } ] },
        new() { Name = "Formatter", IsInterface = true },
        new() { Name = "FormatterTypeRegistry", IsInterface = true },
        new() { Name = "FormKeyAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "GeneratedCodeAttribute", Fields = [ new() { Name = "origin", Type = "string" } ] },
        new() { Name = "GridPersistanceFlags", IsInterface = true, Fields = [ new() { Name = "columnWidths", Type = "boolean" }, new() { Name = "columnVisibility", Type = "boolean" }, new() { Name = "sortColumns", Type = "boolean" }, new() { Name = "filterItems", Type = "boolean" }, new() { Name = "quickFilters", Type = "boolean" }, new() { Name = "quickFilterText", Type = "boolean" }, new() { Name = "quickSearch", Type = "boolean" }, new() { Name = "includeDeleted", Type = "boolean" } ] },
        new() { Name = "GridRadioSelectionMixin", Fields = [ new() { Name = "idField" }, new() { Name = "include" }, new() { Name = "grid" }, new() { Name = "options" }, new() { Name = "isSelectable" } ] },
        new() { Name = "GridRadioSelectionMixinOptions", IsInterface = true, Fields = [ new() { Name = "selectable" } ] },
        new() { Name = "GridRowSelectionMixin", Fields = [ new() { Name = "idField" }, new() { Name = "include" }, new() { Name = "grid" }, new() { Name = "options" }, new() { Name = "isSelectable" } ] },
        new() { Name = "GridRowSelectionMixinOptions", IsInterface = true, Fields = [ new() { Name = "selectable" } ] },
        new() { Name = "GridSelectAllButtonHelper", IsInterface = true },
        new() { Name = "GridUtils", IsInterface = true },
        new() { Name = "GroupInfo", IsInterface = true, Fields = [ new() { Name = "getter" }, new() { Name = "formatter" }, new() { Name = "comparer" }, new() { Name = "aggregators", Type = "any[]" }, new() { Name = "aggregateCollapsed", Type = "boolean" }, new() { Name = "lazyTotalsCalculation", Type = "boolean" } ], GenericParameters = [ new() { Name = "TItem" } ] },
        new() { Name = "HandleRouteEvent", IsInterface = true, Interfaces = [ "Event" ], Fields = [ new() { Name = "route", Type = "string" }, new() { Name = "parts", Type = "string[]" }, new() { Name = "index", Type = "number" }, new() { Name = "isInitial", Type = "boolean" } ] },
        new() { Name = "HiddenAttribute" },
        new() { Name = "HintAttribute", Fields = [ new() { Name = "hint", Type = "string" } ] },
        new() { Name = "HtmlContentEditor", BaseType = "EditorWidget", Interfaces = [ "IStringValue", "IReadOnly" ], Fields = [ new() { Name = "_instanceReady" }, new() { Name = "domNode", Type = "HTMLTextAreaElement" }, new() { Name = "CKEditorVer", Type = "string", IsStatic = true }, new() { Name = "CKEditorBasePath", Type = "string", IsStatic = true } ], GenericParameters = [ new() { Name = "P", Extends = "HtmlContentEditorOptions", Default = "HtmlContentEditorOptions" } ] },
        new() { Name = "HtmlContentEditorOptions", IsInterface = true, Fields = [ new() { Name = "cols", Type = "number" }, new() { Name = "rows", Type = "number" } ] },
        new() { Name = "HtmlNoteContentEditor", BaseType = "HtmlContentEditor", GenericParameters = [ new() { Name = "P", Extends = "HtmlContentEditorOptions", Default = "HtmlContentEditorOptions" } ] },
        new() { Name = "HtmlReportContentEditor", BaseType = "HtmlContentEditor", GenericParameters = [ new() { Name = "P", Extends = "HtmlContentEditorOptions", Default = "HtmlContentEditorOptions" } ] },
        new() { Name = "IBooleanValue" },
        new() { Name = "IDataGrid", IsInterface = true },
        new() { Name = "IDialog" },
        new() { Name = "IDoubleValue" },
        new() { Name = "IdPrefixType", IsInterface = true, Fields = [ new() { Name = "Form", Type = "string" }, new() { Name = "Tabs", Type = "string" }, new() { Name = "Toolbar", Type = "string" }, new() { Name = "PropertyGrid", Type = "string" } ] },
        new() { Name = "IdPropertyAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "IEditDialog" },
        new() { Name = "IFiltering", IsInterface = true },
        new() { Name = "IFrameDialogOptions", IsInterface = true, Fields = [ new() { Name = "html", Type = "string" } ] },
        new() { Name = "IGetEditValue" },
        new() { Name = "IInitializeColumn", IsInterface = true },
        new() { Name = "ImageUploadEditor", BaseType = "FileUploadEditor", GenericParameters = [ new() { Name = "P", Extends = "ImageUploadEditorOptions", Default = "ImageUploadEditorOptions" } ] },
        new() { Name = "ImageUploadEditorOptions", IsInterface = true, Interfaces = [ "FileUploadEditorOptions" ] },
        new() { Name = "InsertableAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "IntegerEditor", BaseType = "EditorWidget", Interfaces = [ "IDoubleValue" ], Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Extends = "IntegerEditorOptions", Default = "IntegerEditorOptions" } ] },
        new() { Name = "IntegerEditorOptions", IsInterface = true, Fields = [ new() { Name = "minValue", Type = "number" }, new() { Name = "maxValue", Type = "number" }, new() { Name = "allowNegatives", Type = "boolean" } ] },
        new() { Name = "IntegerFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "InvalidCastException", BaseType = "Exception" },
        new() { Name = "IQuickFiltering", IsInterface = true },
        new() { Name = "IReadOnly", IsInterface = true },
        new() { Name = "IRowDefinition", IsInterface = true, Fields = [ new() { Name = "deletePermission", Type = "string" }, new() { Name = "idProperty", Type = "string" }, new() { Name = "insertPermission", Type = "string" }, new() { Name = "isActiveProperty", Type = "string" }, new() { Name = "isDeletedProperty", Type = "string" }, new() { Name = "localTextPrefix", Type = "string" }, new() { Name = "nameProperty", Type = "string" }, new() { Name = "readPermission", Type = "string" }, new() { Name = "updatePermission", Type = "string" } ] },
        new() { Name = "IsActivePropertyAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "ISetEditValue" },
        new() { Name = "ISlickFormatter" },
        new() { Name = "IStringValue" },
        new() { Name = "ItemNameAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "IValidateRequired", IsInterface = true },
        new() { Name = "LayoutTimer", IsInterface = true },
        new() { Name = "LazyLoadHelper", IsInterface = true },
        new() { Name = "ListRequest", IsInterface = true, Interfaces = [ "ServiceRequest" ], Fields = [ new() { Name = "Skip", Type = "number" }, new() { Name = "Take", Type = "number" }, new() { Name = "Sort", Type = "string[]" }, new() { Name = "ContainsText", Type = "string" }, new() { Name = "ContainsField", Type = "string" }, new() { Name = "Criteria", Type = "any[]" }, new() { Name = "EqualityFilter" }, new() { Name = "IncludeDeleted", Type = "boolean" }, new() { Name = "ExcludeTotalCount", Type = "boolean" }, new() { Name = "ColumnSelection", Type = "ColumnSelection" }, new() { Name = "IncludeColumns", Type = "string[]" }, new() { Name = "ExcludeColumns", Type = "string[]" }, new() { Name = "ExportColumns", Type = "string[]" }, new() { Name = "DistinctFields", Type = "string[]" }, new() { Name = "Localize", Type = "string" } ] },
        new() { Name = "ListResponse", IsInterface = true, Interfaces = [ "ServiceResponse" ], Fields = [ new() { Name = "Entities", Type = "TEntity[]" }, new() { Name = "Values", Type = "any[]" }, new() { Name = "TotalCount", Type = "number" }, new() { Name = "Skip", Type = "number" }, new() { Name = "Take", Type = "number" } ], GenericParameters = [ new() { Name = "TEntity" } ] },
        new() { Name = "Locale", IsInterface = true, Interfaces = [ "NumberFormat", "DateFormat" ], Fields = [ new() { Name = "stringCompare" }, new() { Name = "toUpper" } ] },
        new() { Name = "LocalTextPrefixAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "Lookup", IsInterface = true, Fields = [ new() { Name = "items", Type = "TItem[]" }, new() { Name = "itemById", Type = "{}" }, new() { Name = "idField", Type = "string" }, new() { Name = "parentIdField", Type = "string" }, new() { Name = "textField", Type = "string" } ], GenericParameters = [ new() { Name = "TItem" } ] },
        new() { Name = "LookupEditor", BaseType = "LookupEditorBase", GenericParameters = [ new() { Name = "P", Extends = "LookupEditorOptions", Default = "LookupEditorOptions" } ] },
        new() { Name = "LookupEditorBase", BaseType = "ComboboxEditor", IsAbstract = true, Fields = [ new() { Name = "lookupChangeUnbind" }, new() { Name = "lookup", Type = "Lookup" } ], GenericParameters = [ new() { Name = "P", Extends = "LookupEditorOptions" }, new() { Name = "TItem" } ] },
        new() { Name = "LookupEditorOptions", IsInterface = true, Interfaces = [ "ComboboxEditorOptions" ], Fields = [ new() { Name = "lookupKey", Type = "string" }, new() { Name = "async", Type = "boolean" } ] },
        new() { Name = "LookupFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "LookupOptions", IsInterface = true, Fields = [ new() { Name = "idField", Type = "string" }, new() { Name = "parentIdField", Type = "string" }, new() { Name = "textField", Type = "string" } ], GenericParameters = [ new() { Name = "TItem" } ] },
        new() { Name = "LT", IsInterface = true },
        new() { Name = "MaskedEditor", BaseType = "EditorWidget", Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Extends = "MaskedEditorOptions", Default = "MaskedEditorOptions" } ] },
        new() { Name = "MaskedEditorOptions", IsInterface = true, Fields = [ new() { Name = "mask", Type = "string" }, new() { Name = "placeholder", Type = "string" } ] },
        new() { Name = "MaximizableAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "MaxLengthAttribute", Fields = [ new() { Name = "maxLength", Type = "number" } ] },
        new() { Name = "MemberType" },
        new() { Name = "MessageDialogOptions", IsInterface = true, Interfaces = [ "DialogOptions" ], Fields = [ new() { Name = "htmlEncode", Type = "boolean" }, new() { Name = "preWrap", Type = "boolean" } ] },
        new() { Name = "MinuteFormatter", Interfaces = [ "Formatter" ] },
        new() { Name = "MultipleFileUploadEditor", BaseType = "EditorWidget", Interfaces = [ "IReadOnly", "IGetEditValue", "ISetEditValue", "IValidateRequired" ], Fields = [ new() { Name = "entities" }, new() { Name = "toolbar" }, new() { Name = "fileSymbols" }, new() { Name = "uploadInput" }, new() { Name = "progress", Type = "HTMLElement" }, new() { Name = "hiddenInput", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Extends = "MultipleFileUploadEditorOptions", Default = "MultipleFileUploadEditorOptions" } ] },
        new() { Name = "MultipleFileUploadEditorOptions", IsInterface = true, Interfaces = [ "FileUploadEditorOptions" ], Fields = [ new() { Name = "jsonEncodeValue", Type = "boolean" } ] },
        new() { Name = "MultipleImageUploadEditor", BaseType = "MultipleFileUploadEditor", GenericParameters = [ new() { Name = "P", Extends = "ImageUploadEditorOptions", Default = "ImageUploadEditorOptions" } ] },
        new() { Name = "NamePropertyAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "NotifyMap", IsInterface = true, Fields = [ new() { Name = "type", Type = "string" }, new() { Name = "iconClass", Type = "string" }, new() { Name = "title", Type = "string" }, new() { Name = "message", Type = "string" } ] },
        new() { Name = "NumberFormat", IsInterface = true, Fields = [ new() { Name = "decimalSeparator", Type = "string" }, new() { Name = "groupSeparator", Type = "string" }, new() { Name = "decimalDigits", Type = "number" }, new() { Name = "positiveSign", Type = "string" }, new() { Name = "negativeSign", Type = "string" }, new() { Name = "nanSymbol", Type = "string" }, new() { Name = "percentSymbol", Type = "string" }, new() { Name = "currencySymbol", Type = "string" } ] },
        new() { Name = "NumberFormatter", Fields = [ new() { Name = "props", Type = "{\"displayFormat\":\"string\"}" } ] },
        new() { Name = "OneWayAttribute" },
        new() { Name = "OptionAttribute" },
        new() { Name = "OptionsTypeAttribute", Fields = [ new() { Name = "value", Type = "Function" } ] },
        new() { Name = "PagerOptions", IsInterface = true, Fields = [ new() { Name = "view" }, new() { Name = "showRowsPerPage", Type = "boolean" }, new() { Name = "rowsPerPage", Type = "number" }, new() { Name = "rowsPerPageOptions", Type = "number[]" }, new() { Name = "onChangePage" }, new() { Name = "onRowsPerPageChange" } ] },
        new() { Name = "PagingInfo", IsInterface = true, Fields = [ new() { Name = "rowsPerPage", Type = "number" }, new() { Name = "page", Type = "number" }, new() { Name = "totalCount", Type = "number" }, new() { Name = "loading", Type = "boolean" }, new() { Name = "error", Type = "string" }, new() { Name = "dataView", Type = "RemoteView" } ] },
        new() { Name = "PagingOptions", IsInterface = true, Fields = [ new() { Name = "rowsPerPage", Type = "number" }, new() { Name = "page", Type = "number" } ] },
        new() { Name = "PanelAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "PasswordEditor", BaseType = "StringEditor", Fields = [ new() { Name = "typeInfo", Type = "EditorTypeInfo", IsStatic = true } ], GenericParameters = [ new() { Name = "TOptions", Default = "{}" } ] },
        new() { Name = "PersistedGridColumn", IsInterface = true, Fields = [ new() { Name = "id", Type = "string" }, new() { Name = "width", Type = "number" }, new() { Name = "sort", Type = "number" }, new() { Name = "visible", Type = "boolean" } ] },
        new() { Name = "PersistedGridSettings", IsInterface = true, Fields = [ new() { Name = "columns", Type = "PersistedGridColumn[]" }, new() { Name = "filterItems", Type = "FilterLine[]" }, new() { Name = "quickFilters", Type = "{}" }, new() { Name = "quickFilterText", Type = "string" }, new() { Name = "quickSearchField", Type = "QuickSearchField" }, new() { Name = "quickSearchText", Type = "string" }, new() { Name = "includeDeleted", Type = "boolean" } ] },
        new() { Name = "PlaceholderAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "PostToServiceOptions", IsInterface = true, Fields = [ new() { Name = "url", Type = "string" }, new() { Name = "service", Type = "string" }, new() { Name = "target", Type = "string" }, new() { Name = "request" } ] },
        new() { Name = "PostToUrlOptions", IsInterface = true, Fields = [ new() { Name = "url", Type = "string" }, new() { Name = "target", Type = "string" }, new() { Name = "params" } ] },
        new() { Name = "PrefixedContext", Fields = [ new() { Name = "idPrefix", Type = "string" } ] },
        new() { Name = "PropertyDialog", BaseType = "BaseDialog", Fields = [ new() { Name = "_entity" }, new() { Name = "_entityId" }, new() { Name = "propertyItemsData", Type = "PropertyItemsData" }, new() { Name = "propertyGrid", Type = "PropertyGrid" } ], GenericParameters = [ new() { Name = "TItem" }, new() { Name = "P" } ] },
        new() { Name = "PropertyFieldElement", IsInterface = true, IsIntersectionType = true, Interfaces = [ "HTMLElement", "{\"editorWidget\":\"Widget\",\"editorPromise\":\"PromiseLike\",\"propertyItem\":\"PropertyItem\"}" ] },
        new() { Name = "PropertyGrid", BaseType = "Widget", Fields = [ new() { Name = "fieldElements" } ], GenericParameters = [ new() { Name = "P", Extends = "PropertyGridOptions", Default = "PropertyGridOptions" } ] },
        new() { Name = "PropertyGridMode" },
        new() { Name = "PropertyGridOptions", IsInterface = true, Fields = [ new() { Name = "idPrefix", Type = "string" }, new() { Name = "items", Type = "PropertyItem[]" }, new() { Name = "localTextPrefix", Type = "string" }, new() { Name = "value" }, new() { Name = "mode", Type = "PropertyGridMode" } ] },
        new() { Name = "PropertyItem", IsInterface = true, Fields = [ new() { Name = "name", Type = "string" }, new() { Name = "title", Type = "string" }, new() { Name = "hint", Type = "string" }, new() { Name = "placeholder", Type = "string" }, new() { Name = "editorType" }, new() { Name = "editorParams" }, new() { Name = "editorAddons" }, new() { Name = "editorCssClass", Type = "string" }, new() { Name = "category", Type = "string" }, new() { Name = "collapsible", Type = "boolean" }, new() { Name = "collapsed", Type = "boolean" }, new() { Name = "tab", Type = "string" }, new() { Name = "cssClass", Type = "string" }, new() { Name = "headerCssClass", Type = "string" }, new() { Name = "formCssClass", Type = "string" }, new() { Name = "maxLength", Type = "number" }, new() { Name = "required", Type = "boolean" }, new() { Name = "insertable", Type = "boolean" }, new() { Name = "insertPermission", Type = "string" }, new() { Name = "hideOnInsert", Type = "boolean" }, new() { Name = "updatable", Type = "boolean" }, new() { Name = "updatePermission", Type = "string" }, new() { Name = "hideOnUpdate", Type = "boolean" }, new() { Name = "readOnly", Type = "boolean" }, new() { Name = "readPermission", Type = "string" }, new() { Name = "oneWay", Type = "boolean" }, new() { Name = "defaultValue" }, new() { Name = "localizable", Type = "boolean" }, new() { Name = "visible", Type = "boolean" }, new() { Name = "allowHide", Type = "boolean" }, new() { Name = "formatterType", Type = "string" }, new() { Name = "formatterParams" }, new() { Name = "displayFormat", Type = "string" }, new() { Name = "alignment", Type = "string" }, new() { Name = "width", Type = "number" }, new() { Name = "widthSet", Type = "boolean" }, new() { Name = "minWidth", Type = "number" }, new() { Name = "maxWidth", Type = "number" }, new() { Name = "labelWidth", Type = "string" }, new() { Name = "resizable", Type = "boolean" }, new() { Name = "sortable", Type = "boolean" }, new() { Name = "sortOrder", Type = "number" }, new() { Name = "groupOrder", Type = "number" }, new() { Name = "summaryType", Type = "SummaryType" }, new() { Name = "editLink", Type = "boolean" }, new() { Name = "editLinkItemType", Type = "string" }, new() { Name = "editLinkIdField", Type = "string" }, new() { Name = "editLinkCssClass", Type = "string" }, new() { Name = "filteringType", Type = "string" }, new() { Name = "filteringParams" }, new() { Name = "filteringIdField", Type = "string" }, new() { Name = "notFilterable", Type = "boolean" }, new() { Name = "filterOnly", Type = "boolean" }, new() { Name = "quickFilter", Type = "boolean" }, new() { Name = "quickFilterParams" }, new() { Name = "quickFilterSeparator", Type = "boolean" }, new() { Name = "quickFilterCssClass", Type = "string" } ] },
        new() { Name = "PropertyItemsData", IsInterface = true, Fields = [ new() { Name = "items", Type = "PropertyItem[]" }, new() { Name = "additionalItems", Type = "PropertyItem[]" } ] },
        new() { Name = "PropertyItemSlickConverter", IsInterface = true },
        new() { Name = "PropertyPanel", BaseType = "BasePanel", Fields = [ new() { Name = "_entity" }, new() { Name = "_entityId" }, new() { Name = "propertyGrid", Type = "PropertyGrid" } ], GenericParameters = [ new() { Name = "TItem" }, new() { Name = "P" } ] },
        new() { Name = "QuickFilter", IsInterface = true, Fields = [ new() { Name = "field", Type = "string" }, new() { Name = "type", Type = "{\"prototype\":\"TWidget\"}" }, new() { Name = "handler" }, new() { Name = "title", Type = "string" }, new() { Name = "options", Type = "[\"P\",\"WidgetProps\"]" }, new() { Name = "element" }, new() { Name = "init" }, new() { Name = "separator", Type = "boolean" }, new() { Name = "cssClass", Type = "string" }, new() { Name = "loadState" }, new() { Name = "saveState" }, new() { Name = "displayText" } ], GenericParameters = [ new() { Name = "TWidget", Extends = "Widget" }, new() { Name = "P" } ] },
        new() { Name = "QuickFilterArgs", IsInterface = true, Fields = [ new() { Name = "field", Type = "string" }, new() { Name = "widget", Type = "TWidget" }, new() { Name = "request", Type = "ListRequest" }, new() { Name = "equalityFilter" }, new() { Name = "value" }, new() { Name = "active", Type = "boolean" }, new() { Name = "handled", Type = "boolean" } ], GenericParameters = [ new() { Name = "TWidget" } ] },
        new() { Name = "QuickFilterBar", BaseType = "Widget", Fields = [ new() { Name = "onChange" }, new() { Name = "submitHandlers" } ], GenericParameters = [ new() { Name = "P", Extends = "QuickFilterBarOptions", Default = "QuickFilterBarOptions" } ] },
        new() { Name = "QuickFilterBarOptions", IsInterface = true, Fields = [ new() { Name = "filters", Type = "QuickFilter<System.Linq.Enumerable+SelectListIterator`2[Serenity.TypeScript.ITypeNode,System.String]>[]" }, new() { Name = "getTitle" }, new() { Name = "idPrefix", Type = "string" } ] },
        new() { Name = "QuickSearchField", IsInterface = true, Fields = [ new() { Name = "name", Type = "string" }, new() { Name = "title", Type = "string" } ] },
        new() { Name = "QuickSearchInput", BaseType = "Widget", Fields = [ new() { Name = "domNode", Type = "HTMLInputElement" }, new() { Name = "lastValue" }, new() { Name = "field" }, new() { Name = "fieldLink" }, new() { Name = "fieldChanged" }, new() { Name = "timer" } ], GenericParameters = [ new() { Name = "P", Extends = "QuickSearchInputOptions", Default = "QuickSearchInputOptions" } ] },
        new() { Name = "QuickSearchInputOptions", IsInterface = true, Fields = [ new() { Name = "typeDelay", Type = "number" }, new() { Name = "loadingParentClass", Type = "string" }, new() { Name = "filteredParentClass", Type = "string" }, new() { Name = "onSearch" }, new() { Name = "fields", Type = "QuickSearchField[]" } ] },
        new() { Name = "RadioButtonEditor", BaseType = "EditorWidget", Interfaces = [ "IReadOnly" ], GenericParameters = [ new() { Name = "P", Extends = "RadioButtonEditorOptions", Default = "RadioButtonEditorOptions" } ] },
        new() { Name = "RadioButtonEditorOptions", IsInterface = true, Fields = [ new() { Name = "enumKey", Type = "string" }, new() { Name = "enumType" }, new() { Name = "lookupKey", Type = "string" } ] },
        new() { Name = "ReadOnlyAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "Recaptcha", BaseType = "EditorWidget", Interfaces = [ "IStringValue" ], GenericParameters = [ new() { Name = "P", Extends = "RecaptchaOptions", Default = "RecaptchaOptions" } ] },
        new() { Name = "RecaptchaOptions", IsInterface = true, Fields = [ new() { Name = "siteKey", Type = "string" }, new() { Name = "language", Type = "string" } ] },
        new() { Name = "ReflectionOptionsSetter", IsInterface = true },
        new() { Name = "ReflectionUtils", IsInterface = true },
        new() { Name = "RemoteView", IsInterface = true, Fields = [ new() { Name = "onSubmit", Type = "CancellableViewCallback" }, new() { Name = "onDataChanged", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onDataLoading", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onDataLoaded", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onPagingInfoChanged", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onRowCountChanged", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onRowsChanged", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onRowsOrCountChanged", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onGroupExpanded", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onGroupCollapsed", Type = "@serenity-is/sleekgrid:EventEmitter" }, new() { Name = "onAjaxCall", Type = "RemoteViewAjaxCallback" }, new() { Name = "onProcessData", Type = "RemoteViewProcessCallback" }, new() { Name = "fastSort" }, new() { Name = "rowsPerPage", Type = "number" }, new() { Name = "errormsg", Type = "string" }, new() { Name = "params" }, new() { Name = "sortBy", Type = "string[]" }, new() { Name = "url", Type = "string" }, new() { Name = "method", Type = "string" }, new() { Name = "idField", Type = "string" }, new() { Name = "seekToPage", Type = "number" } ], GenericParameters = [ new() { Name = "TEntity" } ] },
        new() { Name = "RemoteViewOptions", IsInterface = true, Fields = [ new() { Name = "autoLoad", Type = "boolean" }, new() { Name = "idField", Type = "string" }, new() { Name = "contentType", Type = "string" }, new() { Name = "dataType", Type = "string" }, new() { Name = "filter" }, new() { Name = "params" }, new() { Name = "onSubmit", Type = "CancellableViewCallback" }, new() { Name = "url", Type = "string" }, new() { Name = "localSort", Type = "boolean" }, new() { Name = "sortBy" }, new() { Name = "rowsPerPage", Type = "number" }, new() { Name = "seekToPage", Type = "number" }, new() { Name = "onProcessData", Type = "RemoteViewProcessCallback" }, new() { Name = "method", Type = "string" }, new() { Name = "inlineFilters", Type = "boolean" }, new() { Name = "groupItemMetadataProvider", Type = "@serenity-is/sleekgrid:GroupItemMetadataProvider" }, new() { Name = "onAjaxCall", Type = "RemoteViewAjaxCallback" }, new() { Name = "getItemMetadata" }, new() { Name = "errorMsg", Type = "string" } ] },
        new() { Name = "RequestErrorInfo", IsInterface = true, Fields = [ new() { Name = "status", Type = "number" }, new() { Name = "statusText", Type = "string" }, new() { Name = "responseText", Type = "string" } ] },
        new() { Name = "RequiredAttribute", Fields = [ new() { Name = "isRequired", Type = "boolean" } ] },
        new() { Name = "ResizableAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "ResponsiveAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "RetrieveColumnSelection" },
        new() { Name = "RetrieveRequest", IsInterface = true, Interfaces = [ "ServiceRequest" ], Fields = [ new() { Name = "EntityId" }, new() { Name = "ColumnSelection", Type = "RetrieveColumnSelection" }, new() { Name = "IncludeColumns", Type = "string[]" }, new() { Name = "ExcludeColumns", Type = "string[]" } ] },
        new() { Name = "RetrieveResponse", IsInterface = true, Interfaces = [ "ServiceResponse" ], Fields = [ new() { Name = "Entity", Type = "TEntity" }, new() { Name = "Localizations", Type = "{}" } ], GenericParameters = [ new() { Name = "TEntity" } ] },
        new() { Name = "Router", IsInterface = true },
        new() { Name = "SaveRequest", IsInterface = true, Interfaces = [ "ServiceRequest" ], Fields = [ new() { Name = "EntityId" }, new() { Name = "Entity", Type = "TEntity" }, new() { Name = "Localizations", Type = "{}" } ], GenericParameters = [ new() { Name = "TEntity" } ] },
        new() { Name = "SaveResponse", IsInterface = true, Interfaces = [ "ServiceResponse" ], Fields = [ new() { Name = "EntityId" } ] },
        new() { Name = "ScriptData", IsInterface = true },
        new() { Name = "Select2", Fields = [ new() { Name = "el" }, new() { Name = "ajaxDefaults", Type = "Select2AjaxOptions", IsStatic = true }, new() { Name = "defaults", Type = "Select2Options", IsStatic = true } ] },
        new() { Name = "Select2AjaxOptions", IsInterface = true, Interfaces = [ "RequestInit" ], Fields = [ new() { Name = "headers", Type = "Record" }, new() { Name = "url" }, new() { Name = "quietMillis", Type = "number" }, new() { Name = "data" }, new() { Name = "results" }, new() { Name = "params" } ] },
        new() { Name = "Select2Item", IsInterface = true, Fields = [ new() { Name = "id", Type = "string" }, new() { Name = "text", Type = "string" }, new() { Name = "source" }, new() { Name = "children", Type = "Select2Item[]" }, new() { Name = "disabled", Type = "boolean" }, new() { Name = "locked", Type = "boolean" } ] },
        new() { Name = "Select2Options", IsInterface = true, Fields = [ new() { Name = "element", Type = "Select2Element" }, new() { Name = "width" }, new() { Name = "minimumInputLength", Type = "number" }, new() { Name = "maximumInputLength", Type = "number" }, new() { Name = "minimumResultsForSearch", Type = "number" }, new() { Name = "maximumSelectionSize" }, new() { Name = "placeholder", Type = "string" }, new() { Name = "placeholderOption" }, new() { Name = "separator", Type = "string" }, new() { Name = "allowClear", Type = "boolean" }, new() { Name = "multiple", Type = "boolean" }, new() { Name = "closeOnSelect", Type = "boolean" }, new() { Name = "openOnEnter", Type = "boolean" }, new() { Name = "id" }, new() { Name = "matcher" }, new() { Name = "sortResults" }, new() { Name = "formatAjaxError" }, new() { Name = "formatMatches" }, new() { Name = "formatSelection" }, new() { Name = "formatResult" }, new() { Name = "formatResultCssClass" }, new() { Name = "formatSelectionCssClass" }, new() { Name = "formatNoMatches" }, new() { Name = "formatLoadMore" }, new() { Name = "formatSearching" }, new() { Name = "formatInputTooLong" }, new() { Name = "formatInputTooShort" }, new() { Name = "formatSelectionTooBig" }, new() { Name = "createSearchChoice" }, new() { Name = "createSearchChoicePosition" }, new() { Name = "initSelection" }, new() { Name = "tokenizer" }, new() { Name = "tokenSeparators" }, new() { Name = "query" }, new() { Name = "ajax", Type = "Select2AjaxOptions" }, new() { Name = "data" }, new() { Name = "tags" }, new() { Name = "containerCss" }, new() { Name = "containerCssClass" }, new() { Name = "dropdownCss" }, new() { Name = "dropdownCssClass" }, new() { Name = "dropdownAutoWidth", Type = "boolean" }, new() { Name = "dropdownParent" }, new() { Name = "adaptContainerCssClass" }, new() { Name = "adaptDropdownCssClass" }, new() { Name = "escapeMarkup" }, new() { Name = "searchInputPlaceholder", Type = "string" }, new() { Name = "selectOnBlur", Type = "boolean" }, new() { Name = "blurOnChange", Type = "boolean" }, new() { Name = "loadMorePadding", Type = "number" }, new() { Name = "nextSearchTerm" }, new() { Name = "populateResults" }, new() { Name = "shouldFocusInput" } ] },
        new() { Name = "Select2QueryOptions", IsInterface = true, Fields = [ new() { Name = "element", Type = "Select2Element" }, new() { Name = "term", Type = "string" }, new() { Name = "page", Type = "number" }, new() { Name = "context" }, new() { Name = "callback" }, new() { Name = "matcher" } ] },
        new() { Name = "Select2Result", IsInterface = true, Fields = [ new() { Name = "hasError", Type = "boolean" }, new() { Name = "errorInfo" }, new() { Name = "results", Type = "Select2Item[]" }, new() { Name = "more", Type = "boolean" }, new() { Name = "context" } ] },
        new() { Name = "SelectEditor", BaseType = "ComboboxEditor", GenericParameters = [ new() { Name = "P", Extends = "SelectEditorOptions", Default = "SelectEditorOptions" } ] },
        new() { Name = "SelectEditorOptions", IsInterface = true, Interfaces = [ "ComboboxCommonOptions" ], Fields = [ new() { Name = "items", Type = "any[]" }, new() { Name = "emptyOptionText", Type = "string" } ] },
        new() { Name = "ServiceAttribute", Fields = [ new() { Name = "value", Type = "string" } ] },
        new() { Name = "ServiceError", IsInterface = true, Fields = [ new() { Name = "Code", Type = "string" }, new() { Name = "Arguments", Type = "string" }, new() { Name = "Message", Type = "string" }, new() { Name = "Details", Type = "string" }, new() { Name = "ErrorId", Type = "string" } ] },
        new() { Name = "ServiceLookupEditor", BaseType = "ServiceLookupEditorBase", GenericParameters = [ new() { Name = "P", Extends = "ServiceLookupEditorOptions", Default = "ServiceLookupEditorOptions" }, new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "ServiceLookupEditorBase", BaseType = "ComboboxEditor", IsAbstract = true, GenericParameters = [ new() { Name = "P", Extends = "ServiceLookupEditorOptions" }, new() { Name = "TItem" } ] },
        new() { Name = "ServiceLookupEditorOptions", IsInterface = true, Interfaces = [ "ComboboxEditorOptions" ], Fields = [ new() { Name = "service", Type = "string" }, new() { Name = "idField", Type = "string" }, new() { Name = "textField", Type = "string" }, new() { Name = "pageSize", Type = "number" }, new() { Name = "minimumResultsForSearch" }, new() { Name = "sort", Type = "string[]" }, new() { Name = "columnSelection", Type = "ColumnSelection" }, new() { Name = "includeColumns", Type = "string[]" }, new() { Name = "excludeColumns", Type = "string[]" }, new() { Name = "includeDeleted", Type = "boolean" }, new() { Name = "containsField", Type = "string" }, new() { Name = "equalityFilter" }, new() { Name = "criteria", Type = "any[]" } ] },
        new() { Name = "ServiceLookupFiltering", BaseType = "BaseEditorFiltering" },
        new() { Name = "ServiceOptions", IsInterface = true, Interfaces = [ "RequestInit" ], Fields = [ new() { Name = "allowRedirect", Type = "boolean" }, new() { Name = "async", Type = "boolean" }, new() { Name = "blockUI", Type = "boolean" }, new() { Name = "headers", Type = "Record" }, new() { Name = "request" }, new() { Name = "service", Type = "string" }, new() { Name = "url", Type = "string" }, new() { Name = "errorMode" } ], GenericParameters = [ new() { Name = "TResponse", Extends = "ServiceResponse" } ] },
        new() { Name = "ServiceRequest", IsInterface = true },
        new() { Name = "ServiceResponse", IsInterface = true, Fields = [ new() { Name = "Error", Type = "ServiceError" } ] },
        new() { Name = "SettingStorage", IsInterface = true },
        new() { Name = "SlickFormatting", IsInterface = true },
        new() { Name = "SlickHelper", IsInterface = true },
        new() { Name = "SlickPager", BaseType = "Widget", Fields = [ new() { Name = "currentPage" }, new() { Name = "totalPages" }, new() { Name = "pageSize" }, new() { Name = "stat" } ], GenericParameters = [ new() { Name = "P", Extends = "PagerOptions", Default = "PagerOptions" } ] },
        new() { Name = "SlickTreeHelper", IsInterface = true },
        new() { Name = "StaticPanelAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "StringEditor", BaseType = "EditorWidget", Fields = [ new() { Name = "typeInfo", Type = "EditorTypeInfo", IsStatic = true }, new() { Name = "domNode", Type = "HTMLInputElement" } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "StringFiltering", BaseType = "BaseFiltering" },
        new() { Name = "SubDialogHelper", IsInterface = true },
        new() { Name = "SummaryOptions", IsInterface = true, Fields = [ new() { Name = "aggregators", Type = "any[]" } ] },
        new() { Name = "SummaryType" },
        new() { Name = "TabsExtensions", IsInterface = true },
        new() { Name = "TextAreaEditor", BaseType = "EditorWidget", GenericParameters = [ new() { Name = "P", Extends = "TextAreaEditorOptions", Default = "TextAreaEditorOptions" } ] },
        new() { Name = "TextAreaEditorOptions", IsInterface = true, Fields = [ new() { Name = "cols", Type = "number" }, new() { Name = "rows", Type = "number" } ] },
        new() { Name = "TimeEditor", BaseType = "TimeEditorBase", GenericParameters = [ new() { Name = "P", Extends = "TimeEditorOptions", Default = "TimeEditorOptions" } ] },
        new() { Name = "TimeEditorBase", BaseType = "EditorWidget", Fields = [ new() { Name = "domNode", Type = "HTMLSelectElement" }, new() { Name = "minutes", Type = "Fluent" } ], GenericParameters = [ new() { Name = "P", Extends = "TimeEditorBaseOptions" } ] },
        new() { Name = "TimeEditorBaseOptions", IsInterface = true, Fields = [ new() { Name = "noEmptyOption", Type = "boolean" }, new() { Name = "startHour" }, new() { Name = "endHour" }, new() { Name = "intervalMinutes" } ] },
        new() { Name = "TimeEditorOptions", IsInterface = true, Interfaces = [ "TimeEditorBaseOptions" ], Fields = [ new() { Name = "multiplier", Type = "number" } ] },
        new() { Name = "TimeSpanEditor", BaseType = "TimeEditorBase", GenericParameters = [ new() { Name = "P", Extends = "TimeSpanEditorOptions", Default = "TimeSpanEditorOptions" } ] },
        new() { Name = "TimeSpanEditorOptions", IsInterface = true, Interfaces = [ "TimeEditorBaseOptions" ] },
        new() { Name = "ToastContainerOptions", IsInterface = true, Fields = [ new() { Name = "containerId", Type = "string" }, new() { Name = "positionClass", Type = "string" }, new() { Name = "target", Type = "string" } ] },
        new() { Name = "Toastr", Fields = [ new() { Name = "listener" }, new() { Name = "toastId" }, new() { Name = "previousToast" }, new() { Name = "options", Type = "ToastrOptions" }, new() { Name = "removeContainerIfEmpty" }, new() { Name = "notify" } ] },
        new() { Name = "ToastrOptions", IsInterface = true, IsIntersectionType = true, Interfaces = [ "ToastContainerOptions", "{\"closeButton\":\"boolean\",\"closeClass\":\"string\",\"closeHtml\":\"string\",\"closeOnHover\":\"boolean\",\"extendedTimeOut\":\"number\",\"escapeHtml\":\"boolean\",\"iconClass\":\"string\",\"messageClass\":\"string\",\"newestOnTop\":\"boolean\",\"positionClass\":\"string\",\"preventDuplicates\":\"boolean\",\"rtl\":\"boolean\",\"target\":\"string\",\"timeOut\":\"number\",\"toastClass\":\"string\",\"tapToDismiss\":\"boolean\",\"titleClass\":\"string\",\"onclick\":\"\",\"onCloseClick\":\"\",\"onHidden\":\"\",\"onShown\":\"\"}" ] },
        new() { Name = "Toolbar", BaseType = "Widget", Fields = [ new() { Name = "mouseTrap" } ], GenericParameters = [ new() { Name = "P", Extends = "ToolbarOptions", Default = "ToolbarOptions" } ] },
        new() { Name = "ToolbarOptions", IsInterface = true, Fields = [ new() { Name = "buttons", Type = "ToolButton[]" }, new() { Name = "hotkeyContext" } ] },
        new() { Name = "ToolButton", IsInterface = true, Interfaces = [ "ToolButtonProps" ], Fields = [ new() { Name = "hotkey", Type = "string" }, new() { Name = "hotkeyAllowDefault", Type = "boolean" }, new() { Name = "hotkeyContext" }, new() { Name = "separator" } ] },
        new() { Name = "ToolButtonProps", IsInterface = true, Fields = [ new() { Name = "action", Type = "string" }, new() { Name = "title" }, new() { Name = "hint", Type = "string" }, new() { Name = "cssClass", Type = "string" }, new() { Name = "icon", Type = "IconClassName" }, new() { Name = "onClick" }, new() { Name = "ref" }, new() { Name = "visible" }, new() { Name = "disabled" } ] },
        new() { Name = "Tooltip", Fields = [ new() { Name = "el" }, new() { Name = "defaults", Type = "TooltipOptions", IsStatic = true }, new() { Name = "existingInstance", IsStatic = true } ] },
        new() { Name = "TooltipOptions", IsInterface = true, Fields = [ new() { Name = "title", Type = "string" }, new() { Name = "trigger", Type = "string" } ] },
        new() { Name = "TransformInclude", IsInterface = true },
        new() { Name = "TranslateTextsOptions", IsInterface = true, Fields = [ new() { Name = "SourceLanguageID", Type = "string" }, new() { Name = "Inputs" } ] },
        new() { Name = "TranslateTextsResult", IsInterface = true, Fields = [ new() { Name = "Translations" } ] },
        new() { Name = "TreeGridMixin", Fields = [ new() { Name = "options" }, new() { Name = "dataGrid" } ], GenericParameters = [ new() { Name = "TItem" } ] },
        new() { Name = "TreeGridMixinOptions", IsInterface = true, Fields = [ new() { Name = "grid", Type = "DataGrid" }, new() { Name = "getParentId" }, new() { Name = "toggleField", Type = "string" }, new() { Name = "initialCollapse" } ], GenericParameters = [ new() { Name = "TItem" } ] },
        new() { Name = "TypeMember", IsInterface = true, Fields = [ new() { Name = "name", Type = "string" }, new() { Name = "type", Type = "MemberType" }, new() { Name = "attr", Type = "any[]" }, new() { Name = "getter", Type = "string" }, new() { Name = "setter", Type = "string" } ] },
        new() { Name = "UndeleteRequest", IsInterface = true, Interfaces = [ "ServiceRequest" ], Fields = [ new() { Name = "EntityId" } ] },
        new() { Name = "UndeleteResponse", IsInterface = true, Interfaces = [ "ServiceResponse" ] },
        new() { Name = "UpdatableAttribute", Fields = [ new() { Name = "value", Type = "boolean" } ] },
        new() { Name = "UploadedFile", IsInterface = true, Fields = [ new() { Name = "Filename", Type = "string" }, new() { Name = "OriginalName", Type = "string" } ] },
        new() { Name = "Uploader", Fields = [ new() { Name = "opt" }, new() { Name = "batch" }, new() { Name = "newBatch" }, new() { Name = "addToBatch" }, new() { Name = "endBatch" }, new() { Name = "defaults", Type = "Partial", IsStatic = true }, new() { Name = "requestDefaults", Type = "Partial", IsStatic = true }, new() { Name = "isMultiple" }, new() { Name = "getTypePredicate" }, new() { Name = "getMatchingItems" }, new() { Name = "watchInput" }, new() { Name = "watchDropZone" }, new() { Name = "arrayApi" }, new() { Name = "entriesApi" }, new() { Name = "errorHandler", IsStatic = true } ] },
        new() { Name = "UploaderBatch", IsInterface = true, Fields = [ new() { Name = "event", Type = "Event" }, new() { Name = "filePaths", Type = "string[]" }, new() { Name = "formData", Type = "FormData" }, new() { Name = "isFirst", Type = "boolean" } ] },
        new() { Name = "UploaderErrorData", IsInterface = true, Fields = [ new() { Name = "batch", Type = "UploaderBatch" }, new() { Name = "event", Type = "ProgressEvent" }, new() { Name = "exception" }, new() { Name = "request", Type = "UploaderRequest" }, new() { Name = "response" }, new() { Name = "xhr", Type = "XMLHttpRequest" } ] },
        new() { Name = "UploaderOptions", IsInterface = true, Fields = [ new() { Name = "accept", Type = "string" }, new() { Name = "autoClear", Type = "boolean" }, new() { Name = "batchSize", Type = "number" }, new() { Name = "dropZone" }, new() { Name = "allStart" }, new() { Name = "allStop" }, new() { Name = "batchStart" }, new() { Name = "batchStop" }, new() { Name = "batchSuccess" }, new() { Name = "batchProgress" }, new() { Name = "batchHandler" }, new() { Name = "changeCallback" }, new() { Name = "errorHandler" }, new() { Name = "ignoreType", Type = "boolean" }, new() { Name = "input", Type = "HTMLInputElement" }, new() { Name = "multiple", Type = "boolean" }, new() { Name = "name", Type = "string" } ] },
        new() { Name = "UploaderRequest", IsInterface = true, Fields = [ new() { Name = "headers", Type = "Record" }, new() { Name = "responseType" }, new() { Name = "url", Type = "string" } ] },
        new() { Name = "UploaderSuccessData", IsInterface = true, Fields = [ new() { Name = "batch", Type = "UploaderBatch" }, new() { Name = "request", Type = "UploaderRequest" }, new() { Name = "event", Type = "ProgressEvent" }, new() { Name = "xhr", Type = "XMLHttpRequest" }, new() { Name = "response" } ] },
        new() { Name = "UploadHelper", IsInterface = true },
        new() { Name = "UploadInputOptions", IsInterface = true, Fields = [ new() { Name = "container" }, new() { Name = "zone" }, new() { Name = "progress" }, new() { Name = "inputName", Type = "string" }, new() { Name = "allowMultiple", Type = "boolean" }, new() { Name = "uploadIntent", Type = "string" }, new() { Name = "uploadUrl", Type = "string" }, new() { Name = "fileDone" } ] },
        new() { Name = "UploadResponse", IsInterface = true, Interfaces = [ "ServiceResponse" ], Fields = [ new() { Name = "TemporaryFile", Type = "string" }, new() { Name = "Size", Type = "number" }, new() { Name = "IsImage", Type = "boolean" }, new() { Name = "Width", Type = "number" }, new() { Name = "Height", Type = "number" } ] },
        new() { Name = "URLEditor", BaseType = "StringEditor", GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
        new() { Name = "UrlFormatter", Interfaces = [ "Formatter", "IInitializeColumn" ], Fields = [ new() { Name = "props", Type = "{\"displayProperty\":\"string\",\"displayFormat\":\"string\",\"urlProperty\":\"string\",\"urlFormat\":\"string\",\"target\":\"string\"}" } ] },
        new() { Name = "UserDefinition", IsInterface = true, Fields = [ new() { Name = "Username", Type = "string" }, new() { Name = "DisplayName", Type = "string" }, new() { Name = "IsAdmin", Type = "boolean" }, new() { Name = "Permissions", Type = "{}" } ] },
        new() { Name = "ValidatableElement", IsInterface = true, Interfaces = [ "HTMLElement" ], Fields = [ new() { Name = "form", Type = "HTMLFormElement" }, new() { Name = "name", Type = "string" }, new() { Name = "type", Type = "string" }, new() { Name = "value", Type = "string" } ] },
        new() { Name = "ValidationErrorItem", IsInterface = true, Fields = [ new() { Name = "message", Type = "string" }, new() { Name = "element", Type = "ValidatableElement" }, new() { Name = "method", Type = "string" } ] },
        new() { Name = "ValidationErrorMap", IsInterface = true },
        new() { Name = "ValidationHelper", IsInterface = true },
        new() { Name = "ValidationRulesMap", IsInterface = true },
        new() { Name = "Validator", Fields = [ new() { Name = "autoCreateRanges", Type = "boolean", IsStatic = true }, new() { Name = "defaults", Type = "ValidatorOptions", IsStatic = true }, new() { Name = "messages", Type = "Record", IsStatic = true }, new() { Name = "methods", Type = "Record", IsStatic = true }, new() { Name = "settings", Type = "ValidatorOptions" }, new() { Name = "lastActive", Type = "ValidatableElement" }, new() { Name = "cancelSubmit" }, new() { Name = "currentElements" }, new() { Name = "currentForm" }, new() { Name = "errorMap" }, new() { Name = "errorList" }, new() { Name = "formSubmitted" }, new() { Name = "submitted" }, new() { Name = "submitButton" }, new() { Name = "pendingRequest" }, new() { Name = "invalid" }, new() { Name = "pending" }, new() { Name = "successList" }, new() { Name = "toHide" }, new() { Name = "toShow" }, new() { Name = "init" }, new() { Name = "objectLength", IsStatic = true }, new() { Name = "dependTypes", Type = "{\"boolean\":\"\",\"string\":\"\",\"function\":\"\"}" }, new() { Name = "classRuleSettings", Type = "Record", IsStatic = true } ] },
        new() { Name = "ValidatorOptions", IsInterface = true, Fields = [ new() { Name = "debug", Type = "boolean" }, new() { Name = "errorClass" }, new() { Name = "errorElement" }, new() { Name = "focusInvalid" }, new() { Name = "ignore" }, new() { Name = "messages" }, new() { Name = "normalizer" }, new() { Name = "onclick" }, new() { Name = "onfocusin" }, new() { Name = "onfocusout" }, new() { Name = "onkeyup" }, new() { Name = "onsubmit" }, new() { Name = "pendingClass" }, new() { Name = "rules" }, new() { Name = "success" }, new() { Name = "validClass" } ] },
        new() { Name = "Widget", Fields = [ new() { Name = "typeInfo", Type = "ClassTypeInfo", IsStatic = true }, new() { Name = "nextWidgetNumber", IsStatic = true }, new() { Name = "options", Type = "WidgetProps" }, new() { Name = "uniqueName", Type = "string" }, new() { Name = "idPrefix", Type = "string" }, new() { Name = "domNode", Type = "HTMLElement" }, new() { Name = "isComponent", IsStatic = true, Value = true } ], GenericParameters = [ new() { Name = "P", Default = "{}" } ] },
    }
    .Select(x =>
    {
        x.Module = "@serenity-is/corelib";
        x.SourceFile = "builtin:/node_modules/@serenity-is/corelib/dist/index.d.ts";
        x.IsDeclaration ??= true;
        return x;
    })
    .Concat(new ExternalType[]
    {
        new() { Name = "ArgsAddNewRow", IsInterface = true, Interfaces = [ "ArgsColumn" ], Fields = [ new() { Name = "item" } ] },
        new() { Name = "ArgsCell", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "row", Type = "number" }, new() { Name = "cell", Type = "number" } ] },
        new() { Name = "ArgsCellChange", IsInterface = true, Interfaces = [ "ArgsCell" ], Fields = [ new() { Name = "item" } ] },
        new() { Name = "ArgsCellEdit", IsInterface = true, Interfaces = [ "ArgsCellChange" ], Fields = [ new() { Name = "column", Type = "Column" } ] },
        new() { Name = "ArgsColumn", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "column", Type = "Column" } ] },
        new() { Name = "ArgsColumnNode", IsInterface = true, Interfaces = [ "ArgsColumn" ], Fields = [ new() { Name = "node", Type = "HTMLElement" } ] },
        new() { Name = "ArgsCssStyle", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "key", Type = "string" }, new() { Name = "hash", Type = "CellStylesHash" } ] },
        new() { Name = "ArgsEditorDestroy", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "editor", Type = "Editor" } ] },
        new() { Name = "ArgsGrid", IsInterface = true, Fields = [ new() { Name = "grid", Type = "Grid" } ] },
        new() { Name = "ArgsMoveRows", IsInterface = true, Fields = [ new() { Name = "rows", Type = "number[]" }, new() { Name = "insertBefore", Type = "number" } ] },
        new() { Name = "ArgsScroll", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "scrollLeft", Type = "number" }, new() { Name = "scrollTop", Type = "number" } ] },
        new() { Name = "ArgsSelectedRowsChange", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "rows", Type = "number[]" }, new() { Name = "changedSelectedRows", Type = "number[]" }, new() { Name = "changedUnselectedRows", Type = "number[]" }, new() { Name = "previousSelectedRows", Type = "number[]" }, new() { Name = "caller" } ] },
        new() { Name = "ArgsSort", IsInterface = true, Interfaces = [ "ArgsGrid" ], Fields = [ new() { Name = "multiColumnSort", Type = "boolean" }, new() { Name = "sortAsc", Type = "boolean" }, new() { Name = "sortCol", Type = "Column" }, new() { Name = "sortCols", Type = "ArgsSortCol[]" } ] },
        new() { Name = "ArgsSortCol", IsInterface = true, Fields = [ new() { Name = "sortCol", Type = "Column" }, new() { Name = "sortAsc", Type = "boolean" } ] },
        new() { Name = "ArgsValidationError", IsInterface = true, Interfaces = [ "ArgsCell" ], Fields = [ new() { Name = "editor", Type = "Editor" }, new() { Name = "column", Type = "Column" }, new() { Name = "cellNode", Type = "HTMLElement" }, new() { Name = "validationResults", Type = "ValidationResult" } ] },
        new() { Name = "AutoTooltips", Interfaces = [ "IPlugin" ], Fields = [ new() { Name = "grid" }, new() { Name = "options" }, new() { Name = "defaults", Type = "AutoTooltipsOptions", IsStatic = true }, new() { Name = "handleMouseEnter" }, new() { Name = "handleHeaderMouseEnter" }, new() { Name = "pluginName", Type = "string" } ] },
        new() { Name = "AutoTooltipsOptions", IsInterface = true, Fields = [ new() { Name = "enableForCells", Type = "boolean" }, new() { Name = "enableForHeaderCells", Type = "boolean" }, new() { Name = "maxToolTipLength", Type = "number" }, new() { Name = "replaceExisting", Type = "boolean" } ] },
        new() { Name = "BaseCellEdit", IsAbstract = true, Fields = [ new() { Name = "_input" }, new() { Name = "_defaultValue" }, new() { Name = "_args", Type = "EditorOptions" } ] },
        new() { Name = "CellRange", Fields = [ new() { Name = "fromRow", Type = "number" }, new() { Name = "fromCell", Type = "number" }, new() { Name = "toRow", Type = "number" }, new() { Name = "toCell", Type = "number" } ] },
        new() { Name = "CellStylesHash", IsInterface = true },
        new() { Name = "CheckboxCellEdit", BaseType = "BaseCellEdit", Fields = [ new() { Name = "_input", Type = "HTMLInputElement" } ] },
        new() { Name = "Column", IsInterface = true, Fields = [ new() { Name = "asyncPostRender", Type = "AsyncPostRender" }, new() { Name = "asyncPostRenderCleanup", Type = "AsyncPostCleanup" }, new() { Name = "behavior" }, new() { Name = "cannotTriggerInsert", Type = "boolean" }, new() { Name = "cssClass", Type = "string" }, new() { Name = "defaultSortAsc", Type = "boolean" }, new() { Name = "editor", Type = "EditorClass" }, new() { Name = "editorFixedDecimalPlaces", Type = "number" }, new() { Name = "field", Type = "string" }, new() { Name = "frozen", Type = "boolean" }, new() { Name = "focusable", Type = "boolean" }, new() { Name = "footerCssClass", Type = "string" }, new() { Name = "format", Type = "ColumnFormat" }, new() { Name = "formatter", Type = "CompatFormatter" }, new() { Name = "groupTotalsFormatter" }, new() { Name = "headerCssClass", Type = "string" }, new() { Name = "id", Type = "string" }, new() { Name = "maxWidth" }, new() { Name = "minWidth", Type = "number" }, new() { Name = "name", Type = "string" }, new() { Name = "nameIsHtml", Type = "boolean" }, new() { Name = "previousWidth", Type = "number" }, new() { Name = "referencedFields", Type = "string[]" }, new() { Name = "rerenderOnResize", Type = "boolean" }, new() { Name = "resizable", Type = "boolean" }, new() { Name = "selectable", Type = "boolean" }, new() { Name = "sortable", Type = "boolean" }, new() { Name = "sortOrder", Type = "number" }, new() { Name = "toolTip", Type = "string" }, new() { Name = "validator" }, new() { Name = "visible", Type = "boolean" }, new() { Name = "width", Type = "number" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "ColumnMetadata", IsInterface = true, Fields = [ new() { Name = "colspan" }, new() { Name = "cssClasses", Type = "string" }, new() { Name = "editor", Type = "EditorClass" }, new() { Name = "format", Type = "ColumnFormat" }, new() { Name = "formatter", Type = "CompatFormatter" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "ColumnSort", IsInterface = true, Fields = [ new() { Name = "columnId", Type = "string" }, new() { Name = "sortAsc", Type = "boolean" } ] },
        new() { Name = "CompatFormatterResult", IsInterface = true, Fields = [ new() { Name = "addClasses", Type = "string" }, new() { Name = "text", Type = "FormatterResult" }, new() { Name = "toolTip", Type = "string" } ] },
        new() { Name = "CompositeEditorOptions", IsInterface = true, Fields = [ new() { Name = "formValues" } ] },
        new() { Name = "DateCellEdit", BaseType = "TextCellEdit", Fields = [ new() { Name = "_calendarOpen" } ] },
        new() { Name = "EditCommand", IsInterface = true, Fields = [ new() { Name = "row", Type = "number" }, new() { Name = "cell", Type = "number" }, new() { Name = "editor", Type = "Editor" }, new() { Name = "serializedValue" }, new() { Name = "prevSerializedValue" }, new() { Name = "execute" }, new() { Name = "undo" } ] },
        new() { Name = "EditController", IsInterface = true },
        new() { Name = "Editor", IsInterface = true, Fields = [ new() { Name = "keyCaptureList", Type = "number[]" } ] },
        new() { Name = "EditorClass", IsInterface = true, Fields = [ new() { Name = "suppressClearOnEdit", Type = "boolean" } ] },
        new() { Name = "EditorFactory", IsInterface = true },
        new() { Name = "EditorHost", IsInterface = true, Fields = [ new() { Name = "onCompositeEditorChange", Type = "EventEmitter" } ] },
        new() { Name = "EditorLock", Fields = [ new() { Name = "activeEditController" } ] },
        new() { Name = "EditorOptions", IsInterface = true, Fields = [ new() { Name = "grid", Type = "EditorHost" }, new() { Name = "gridPosition", Type = "Position" }, new() { Name = "position", Type = "Position" }, new() { Name = "editorCellNavOnLRKeys", Type = "boolean" }, new() { Name = "column", Type = "Column" }, new() { Name = "columnMetaData", Type = "ColumnMetadata" }, new() { Name = "compositeEditorOptions", Type = "CompositeEditorOptions" }, new() { Name = "container", Type = "HTMLElement" }, new() { Name = "item" }, new() { Name = "event", Type = "IEventData" }, new() { Name = "commitChanges" }, new() { Name = "cancelChanges" } ] },
        new() { Name = "Editors", IsInterface = true },
        new() { Name = "EventData", Interfaces = [ "IEventData" ], Fields = [ new() { Name = "_isPropagationStopped" }, new() { Name = "_isImmediatePropagationStopped" } ] },
        new() { Name = "EventEmitter", Fields = [ new() { Name = "_handlers" } ], GenericParameters = [ new() { Name = "TArgs", Default = "any" }, new() { Name = "TEventData", Extends = "IEventData", Default = "IEventData" } ] },
        new() { Name = "EventSubscriber", Fields = [ new() { Name = "_handlers" } ], GenericParameters = [ new() { Name = "TArgs", Default = "any" }, new() { Name = "TEventData", Extends = "IEventData", Default = "IEventData" } ] },
        new() { Name = "FloatCellEdit", BaseType = "TextCellEdit", Fields = [ new() { Name = "AllowEmptyValue", Type = "boolean", IsStatic = true }, new() { Name = "DefaultDecimalPlaces", Type = "number", IsStatic = true } ] },
        new() { Name = "FormatterContext", IsInterface = true, Fields = [ new() { Name = "addAttrs", Type = "{}" }, new() { Name = "addClass", Type = "string" }, new() { Name = "row", Type = "number" }, new() { Name = "cell", Type = "number" }, new() { Name = "column", Type = "Column" }, new() { Name = "grid" }, new() { Name = "item", Type = "TItem" }, new() { Name = "tooltip", Type = "string" }, new() { Name = "value" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "FormatterFactory", IsInterface = true, GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "Formatters", IsInterface = true },
        new() { Name = "Grid", Interfaces = [ "EditorHost" ], Fields = [ new() { Name = "_absoluteColMinWidth" }, new() { Name = "_activeCanvasNode" }, new() { Name = "_activeCell" }, new() { Name = "_activeCellNode" }, new() { Name = "_activePosX" }, new() { Name = "_activeRow" }, new() { Name = "_activeViewportNode" }, new() { Name = "_cellCssClasses" }, new() { Name = "_cellHeightDiff" }, new() { Name = "_cellWidthDiff" }, new() { Name = "_cellNavigator" }, new() { Name = "_colById" }, new() { Name = "_colDefaults" }, new() { Name = "_colLeft" }, new() { Name = "_colRight" }, new() { Name = "_cols" }, new() { Name = "_columnCssRulesL" }, new() { Name = "_columnCssRulesR" }, new() { Name = "_currentEditor" }, new() { Name = "_data" }, new() { Name = "_draggableInstance" }, new() { Name = "_editController" }, new() { Name = "_emptyNode" }, new() { Name = "_headerColumnWidthDiff" }, new() { Name = "_hEditorLoader" }, new() { Name = "_hPostRender" }, new() { Name = "_hPostRenderCleanup" }, new() { Name = "_hRender" }, new() { Name = "_ignoreScrollUntil" }, new() { Name = "_initColById" }, new() { Name = "_initCols" }, new() { Name = "_initialized" }, new() { Name = "_jQuery" }, new() { Name = "_jumpinessCoefficient" }, new() { Name = "_lastRenderTime" }, new() { Name = "_layout" }, new() { Name = "_numberOfPages" }, new() { Name = "_options" }, new() { Name = "_page" }, new() { Name = "_pageHeight" }, new() { Name = "_pageOffset" }, new() { Name = "_pagingActive" }, new() { Name = "_pagingIsLastPage" }, new() { Name = "_plugins" }, new() { Name = "_postCleanupActive" }, new() { Name = "_postProcessCleanupQueue" }, new() { Name = "_postProcessedRows" }, new() { Name = "_postProcessFromRow" }, new() { Name = "_postProcessGroupId" }, new() { Name = "_postProcessToRow" }, new() { Name = "_postRenderActive" }, new() { Name = "_removeNode" }, new() { Name = "_rowsCache" }, new() { Name = "_scrollDims" }, new() { Name = "_scrollLeft" }, new() { Name = "_scrollLeftPrev" }, new() { Name = "_scrollLeftRendered" }, new() { Name = "_scrollTop" }, new() { Name = "_scrollTopPrev" }, new() { Name = "_scrollTopRendered" }, new() { Name = "_selectedRows" }, new() { Name = "_selectionModel" }, new() { Name = "_serializedEditorValue" }, new() { Name = "_sortColumns" }, new() { Name = "_styleNode" }, new() { Name = "_stylesheet" }, new() { Name = "_tabbingDirection" }, new() { Name = "_uid" }, new() { Name = "_viewportInfo" }, new() { Name = "_vScrollDir" }, new() { Name = "_boundAncestorScroll" }, new() { Name = "_container" }, new() { Name = "_focusSink1" }, new() { Name = "_focusSink2" }, new() { Name = "_groupingPanel" }, new() { Name = "onActiveCellChanged", Type = "EventEmitter" }, new() { Name = "onActiveCellPositionChanged", Type = "EventEmitter" }, new() { Name = "onAddNewRow", Type = "EventEmitter" }, new() { Name = "onBeforeCellEditorDestroy", Type = "EventEmitter" }, new() { Name = "onBeforeDestroy", Type = "EventEmitter" }, new() { Name = "onBeforeEditCell", Type = "EventEmitter" }, new() { Name = "onBeforeFooterRowCellDestroy", Type = "EventEmitter" }, new() { Name = "onBeforeHeaderCellDestroy", Type = "EventEmitter" }, new() { Name = "onBeforeHeaderRowCellDestroy", Type = "EventEmitter" }, new() { Name = "onCellChange", Type = "EventEmitter" }, new() { Name = "onCellCssStylesChanged", Type = "EventEmitter" }, new() { Name = "onClick", Type = "EventEmitter" }, new() { Name = "onColumnsReordered", Type = "EventEmitter" }, new() { Name = "onColumnsResized", Type = "EventEmitter" }, new() { Name = "onCompositeEditorChange", Type = "EventEmitter" }, new() { Name = "onContextMenu", Type = "EventEmitter" }, new() { Name = "onDblClick", Type = "EventEmitter" }, new() { Name = "onDrag", Type = "EventEmitter" }, new() { Name = "onDragEnd", Type = "EventEmitter" }, new() { Name = "onDragInit", Type = "EventEmitter" }, new() { Name = "onDragStart", Type = "EventEmitter" }, new() { Name = "onFooterRowCellRendered", Type = "EventEmitter" }, new() { Name = "onHeaderCellRendered", Type = "EventEmitter" }, new() { Name = "onHeaderClick", Type = "EventEmitter" }, new() { Name = "onHeaderContextMenu", Type = "EventEmitter" }, new() { Name = "onHeaderMouseEnter", Type = "EventEmitter" }, new() { Name = "onHeaderMouseLeave", Type = "EventEmitter" }, new() { Name = "onHeaderRowCellRendered", Type = "EventEmitter" }, new() { Name = "onKeyDown", Type = "EventEmitter" }, new() { Name = "onMouseEnter", Type = "EventEmitter" }, new() { Name = "onMouseLeave", Type = "EventEmitter" }, new() { Name = "onScroll", Type = "EventEmitter" }, new() { Name = "onSelectedRowsChanged", Type = "EventEmitter" }, new() { Name = "onSort", Type = "EventEmitter" }, new() { Name = "onValidationError", Type = "EventEmitter" }, new() { Name = "onViewportChanged", Type = "EventEmitter" }, new() { Name = "createGroupingPanel" }, new() { Name = "bindAncestorScroll" }, new() { Name = "hasFrozenColumns" }, new() { Name = "hasFrozenRows" }, new() { Name = "unregisterSelectionModel" }, new() { Name = "colIdOrIdxToCell" }, new() { Name = "getViewports" }, new() { Name = "getAvailableWidth" }, new() { Name = "updateCanvasWidth" }, new() { Name = "unbindAncestorScrollEvents" }, new() { Name = "createColumnFooters" }, new() { Name = "createColumnHeaders" }, new() { Name = "setupColumnSort" }, new() { Name = "offset", IsStatic = true }, new() { Name = "sortableColInstances" }, new() { Name = "setupColumnReorder" }, new() { Name = "setupColumnResize" }, new() { Name = "setOverflow" }, new() { Name = "measureCellPaddingAndBorder" }, new() { Name = "createCssRules" }, new() { Name = "getColumnCssRules" }, new() { Name = "removeCssRules" }, new() { Name = "trigger" }, new() { Name = "applyColumnHeaderWidths" }, new() { Name = "handleSelectedRangesChanged" }, new() { Name = "updateViewColLeftRight" }, new() { Name = "setInitialCols" }, new() { Name = "validateAndEnforceOptions" }, new() { Name = "viewOnRowCountChanged" }, new() { Name = "viewOnRowsChanged" }, new() { Name = "viewOnDataChanged" }, new() { Name = "bindToData" }, new() { Name = "unbindFromData" }, new() { Name = "getDataLengthIncludingAddNew" }, new() { Name = "getRowTop" }, new() { Name = "getRowFromPosition" }, new() { Name = "scrollTo" }, new() { Name = "getEditor" }, new() { Name = "appendRowHtml" }, new() { Name = "appendCellHtml" }, new() { Name = "cleanupRows" }, new() { Name = "queuePostProcessedRowForCleanup" }, new() { Name = "queuePostProcessedCellForCleanup" }, new() { Name = "removeRowFromCache" }, new() { Name = "updateCellWithFormatter" }, new() { Name = "calcViewportSize" }, new() { Name = "resizeCanvas" }, new() { Name = "ensureCellNodesInRowsCache" }, new() { Name = "cleanUpCells" }, new() { Name = "cleanUpAndRenderCells" }, new() { Name = "renderRows" }, new() { Name = "startPostProcessing" }, new() { Name = "startPostProcessingCleanup" }, new() { Name = "invalidatePostProcessingResults" }, new() { Name = "updateRowPositions" }, new() { Name = "updateGrandTotals" }, new() { Name = "render" }, new() { Name = "handleHeaderRowScroll" }, new() { Name = "handleFooterRowScroll" }, new() { Name = "handleMouseWheel" }, new() { Name = "handleScroll" }, new() { Name = "asyncPostProcessRows" }, new() { Name = "asyncPostProcessCleanupRows" }, new() { Name = "updateCellCssStylesOnRenderedRows" }, new() { Name = "handleDragInit" }, new() { Name = "handleDragStart" }, new() { Name = "handleDrag" }, new() { Name = "handleDragEnd" }, new() { Name = "handleKeyDown" }, new() { Name = "getTextSelection" }, new() { Name = "setTextSelection" }, new() { Name = "handleClick" }, new() { Name = "handleContextMenu" }, new() { Name = "handleDblClick" }, new() { Name = "handleHeaderMouseEnter" }, new() { Name = "handleHeaderMouseLeave" }, new() { Name = "handleHeaderContextMenu" }, new() { Name = "handleHeaderClick" }, new() { Name = "handleMouseEnter" }, new() { Name = "handleMouseLeave" }, new() { Name = "cellExists" }, new() { Name = "setFocus" }, new() { Name = "internalScrollColumnIntoView" }, new() { Name = "setActiveCellInternal" }, new() { Name = "isCellPotentiallyEditable" }, new() { Name = "makeActiveCellNormal" }, new() { Name = "makeActiveCellEditable" }, new() { Name = "commitEditAndSetFocus" }, new() { Name = "cancelEditAndSetFocus" }, new() { Name = "getActiveCellPosition" }, new() { Name = "handleActiveCellPositionChange" }, new() { Name = "scrollPage" }, new() { Name = "cancelCurrentEdit" }, new() { Name = "rowsToRanges" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "GridOptions", IsInterface = true, Fields = [ new() { Name = "addNewRowCssClass", Type = "string" }, new() { Name = "alwaysAllowHorizontalScroll", Type = "boolean" }, new() { Name = "alwaysShowVerticalScroll", Type = "boolean" }, new() { Name = "asyncEditorLoadDelay", Type = "number" }, new() { Name = "asyncEditorLoading", Type = "boolean" }, new() { Name = "asyncPostCleanupDelay", Type = "number" }, new() { Name = "asyncPostRenderDelay", Type = "number" }, new() { Name = "autoEdit", Type = "boolean" }, new() { Name = "autoHeight", Type = "boolean" }, new() { Name = "cellFlashingCssClass", Type = "string" }, new() { Name = "emptyNode" }, new() { Name = "columns", Type = "Column<TItem>[]" }, new() { Name = "createPreHeaderPanel", Type = "boolean" }, new() { Name = "dataItemColumnValueExtractor" }, new() { Name = "defaultColumnWidth", Type = "number" }, new() { Name = "defaultFormat", Type = "ColumnFormat" }, new() { Name = "defaultFormatter", Type = "CompatFormatter" }, new() { Name = "editable", Type = "boolean" }, new() { Name = "editCommandHandler" }, new() { Name = "editorCellNavOnLRKeys", Type = "boolean" }, new() { Name = "editorFactory", Type = "EditorFactory" }, new() { Name = "editorLock", Type = "EditorLock" }, new() { Name = "enableAddRow", Type = "boolean" }, new() { Name = "enableAsyncPostRender", Type = "boolean" }, new() { Name = "enableAsyncPostRenderCleanup", Type = "boolean" }, new() { Name = "enableCellNavigation", Type = "boolean" }, new() { Name = "enableCellRangeSelection", Type = "boolean" }, new() { Name = "enableColumnReorder", Type = "boolean" }, new() { Name = "enableRowReordering", Type = "boolean" }, new() { Name = "enableTabKeyNavigation", Type = "boolean" }, new() { Name = "enableTextSelectionOnCells", Type = "boolean" }, new() { Name = "explicitInitialization", Type = "boolean" }, new() { Name = "footerRowHeight", Type = "number" }, new() { Name = "forceFitColumns", Type = "boolean" }, new() { Name = "forceSyncScrolling", Type = "boolean" }, new() { Name = "forceSyncScrollInterval", Type = "number" }, new() { Name = "formatterFactory", Type = "FormatterFactory" }, new() { Name = "frozenBottom", Type = "boolean" }, new() { Name = "frozenColumns", Type = "number" }, new() { Name = "frozenRows", Type = "number" }, new() { Name = "fullWidthRows", Type = "boolean" }, new() { Name = "groupingPanel", Type = "boolean" }, new() { Name = "groupingPanelHeight", Type = "number" }, new() { Name = "groupTotalsFormatter" }, new() { Name = "headerRowHeight", Type = "number" }, new() { Name = "jQuery", Type = "{\"ready\":\"\",\"fn\":\"\"}" }, new() { Name = "leaveSpaceForNewRows", Type = "boolean" }, new() { Name = "layoutEngine", Type = "LayoutEngine" }, new() { Name = "minBuffer", Type = "number" }, new() { Name = "multiColumnSort", Type = "boolean" }, new() { Name = "multiSelect", Type = "boolean" }, new() { Name = "preHeaderPanelHeight", Type = "number" }, new() { Name = "renderAllCells", Type = "boolean" }, new() { Name = "renderAllRows", Type = "boolean" }, new() { Name = "removeNode" }, new() { Name = "rowHeight", Type = "number" }, new() { Name = "rtl", Type = "boolean" }, new() { Name = "sanitizer" }, new() { Name = "selectedCellCssClass", Type = "string" }, new() { Name = "showCellSelection", Type = "boolean" }, new() { Name = "showColumnHeader", Type = "boolean" }, new() { Name = "showFooterRow", Type = "boolean" }, new() { Name = "showGroupingPanel", Type = "boolean" }, new() { Name = "showHeaderRow", Type = "boolean" }, new() { Name = "showPreHeaderPanel", Type = "boolean" }, new() { Name = "showTopPanel", Type = "boolean" }, new() { Name = "suppressActiveCellChangeOnEdit", Type = "boolean" }, new() { Name = "syncColumnCellResize", Type = "boolean" }, new() { Name = "topPanelHeight", Type = "number" }, new() { Name = "useLegacyUI", Type = "boolean" }, new() { Name = "useCssVars", Type = "boolean" }, new() { Name = "viewportClass", Type = "string" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "Group", BaseType = "NonDataRow", Fields = [ new() { Name = "__group", Value = true }, new() { Name = "level", Type = "number" }, new() { Name = "count", Type = "number" }, new() { Name = "value" }, new() { Name = "title", Type = "string" }, new() { Name = "collapsed", Type = "boolean" }, new() { Name = "totals", Type = "GroupTotals" }, new() { Name = "rows", Type = "TEntity[]" }, new() { Name = "groups", Type = "Group<TEntity>[]" }, new() { Name = "groupingKey", Type = "string" } ], GenericParameters = [ new() { Name = "TEntity", Default = "any" } ] },
        new() { Name = "GroupItemMetadataProvider", Interfaces = [ "IPlugin" ], Fields = [ new() { Name = "grid", Type = "Grid" }, new() { Name = "options" }, new() { Name = "defaults", Type = "GroupItemMetadataProviderOptions", IsStatic = true }, new() { Name = "pluginName", Value = "GroupItemMetadataProvider" }, new() { Name = "handleGridClick" }, new() { Name = "handleGridKeyDown" }, new() { Name = "groupCellPosition" }, new() { Name = "getGroupRowMetadata" }, new() { Name = "getTotalsRowMetadata" } ] },
        new() { Name = "GroupItemMetadataProviderOptions", IsInterface = true, Fields = [ new() { Name = "enableExpandCollapse", Type = "boolean" }, new() { Name = "groupCellCssClass", Type = "string" }, new() { Name = "groupCssClass", Type = "string" }, new() { Name = "groupIndentation", Type = "number" }, new() { Name = "groupFocusable", Type = "boolean" }, new() { Name = "groupFormat", Type = "ColumnFormat" }, new() { Name = "groupFormatter", Type = "CompatFormatter" }, new() { Name = "groupLevelPrefix", Type = "string" }, new() { Name = "groupRowTotals", Type = "boolean" }, new() { Name = "groupTitleCssClass", Type = "string" }, new() { Name = "hasSummaryType" }, new() { Name = "toggleCssClass", Type = "string" }, new() { Name = "toggleExpandedCssClass", Type = "string" }, new() { Name = "toggleCollapsedCssClass", Type = "string" }, new() { Name = "totalsCssClass", Type = "string" }, new() { Name = "totalsFocusable", Type = "boolean" }, new() { Name = "totalsFormat", Type = "ColumnFormat" }, new() { Name = "totalsFormatter", Type = "CompatFormatter" } ] },
        new() { Name = "GroupTotals", BaseType = "NonDataRow", Fields = [ new() { Name = "__groupTotals", Value = true }, new() { Name = "group", Type = "Group" }, new() { Name = "initialized", Type = "boolean" }, new() { Name = "sum", Type = "number" }, new() { Name = "avg", Type = "number" }, new() { Name = "min" }, new() { Name = "max" } ], GenericParameters = [ new() { Name = "TEntity", Default = "any" } ] },
        new() { Name = "IEventData", IsInterface = true, Fields = [ new() { Name = "type", Type = "string" }, new() { Name = "currentTarget" }, new() { Name = "target" }, new() { Name = "originalEvent" }, new() { Name = "defaultPrevented", Type = "boolean" } ] },
        new() { Name = "IntegerCellEdit", BaseType = "TextCellEdit" },
        new() { Name = "IPlugin", IsInterface = true, Fields = [ new() { Name = "pluginName", Type = "string" }, new() { Name = "destroy" } ] },
        new() { Name = "ItemMetadata", IsInterface = true, Fields = [ new() { Name = "cssClasses", Type = "string" }, new() { Name = "columns", Type = "{}" }, new() { Name = "focusable", Type = "boolean" }, new() { Name = "format", Type = "ColumnFormat" }, new() { Name = "formatter", Type = "CompatFormatter" }, new() { Name = "selectable", Type = "boolean" } ], GenericParameters = [ new() { Name = "TItem", Default = "any" } ] },
        new() { Name = "LayoutEngine", IsInterface = true, Fields = [ new() { Name = "layoutName", Type = "string" } ] },
        new() { Name = "LayoutHost", IsInterface = true },
        new() { Name = "LongTextCellEdit", BaseType = "BaseCellEdit", Fields = [ new() { Name = "_input", Type = "HTMLTextAreaElement" }, new() { Name = "_container", Type = "HTMLElement" }, new() { Name = "_wrapper", Type = "HTMLDivElement" } ] },
        new() { Name = "NonDataRow", Fields = [ new() { Name = "__nonDataRow", Type = "boolean" } ] },
        new() { Name = "PercentCompleteCellEdit", BaseType = "IntegerCellEdit", Fields = [ new() { Name = "_picker", Type = "HTMLDivElement" } ] },
        new() { Name = "Position", IsInterface = true, Fields = [ new() { Name = "bottom", Type = "number" }, new() { Name = "height", Type = "number" }, new() { Name = "left", Type = "number" }, new() { Name = "right", Type = "number" }, new() { Name = "top", Type = "number" }, new() { Name = "visible", Type = "boolean" }, new() { Name = "width", Type = "number" } ] },
        new() { Name = "RowCell", IsInterface = true, Fields = [ new() { Name = "row", Type = "number" }, new() { Name = "cell", Type = "number" } ] },
        new() { Name = "RowMoveManager", Interfaces = [ "IPlugin" ], Fields = [ new() { Name = "grid" }, new() { Name = "options" }, new() { Name = "dragging" }, new() { Name = "handler" }, new() { Name = "onBeforeMoveRows", Type = "EventEmitter" }, new() { Name = "onMoveRows", Type = "EventEmitter" }, new() { Name = "defaults", Type = "RowMoveManagerOptions", IsStatic = true }, new() { Name = "handleDragInit" }, new() { Name = "handleDragStart" }, new() { Name = "handleDrag" }, new() { Name = "handleDragEnd" } ] },
        new() { Name = "RowMoveManagerOptions", IsInterface = true, Fields = [ new() { Name = "cancelEditOnDrag", Type = "boolean" } ] },
        new() { Name = "RowSelectionModel", Interfaces = [ "IPlugin", "SelectionModel" ], Fields = [ new() { Name = "grid" }, new() { Name = "handler" }, new() { Name = "options" }, new() { Name = "ranges" }, new() { Name = "onSelectedRangesChanged", Type = "EventEmitter" }, new() { Name = "defaults", Type = "RowSelectionModelOptions", IsStatic = true }, new() { Name = "wrapHandler" }, new() { Name = "rowsToRanges" }, new() { Name = "handleActiveCellChange" }, new() { Name = "handleKeyDown" }, new() { Name = "handleClick" } ] },
        new() { Name = "RowSelectionModelOptions", IsInterface = true, Fields = [ new() { Name = "selectActiveRow", Type = "boolean" } ] },
        new() { Name = "SelectionModel", IsInterface = true, Interfaces = [ "IPlugin" ], Fields = [ new() { Name = "onSelectedRangesChanged", Type = "EventEmitter" } ] },
        new() { Name = "TextCellEdit", BaseType = "BaseCellEdit", Fields = [ new() { Name = "_input", Type = "HTMLInputElement" } ] },
        new() { Name = "ValidationResult", IsInterface = true, Fields = [ new() { Name = "valid", Type = "boolean" }, new() { Name = "msg", Type = "string" } ] },
        new() { Name = "ViewportInfo", IsInterface = true, Fields = [ new() { Name = "height", Type = "number" }, new() { Name = "width", Type = "number" }, new() { Name = "hasVScroll", Type = "boolean" }, new() { Name = "hasHScroll", Type = "boolean" }, new() { Name = "headerHeight", Type = "number" }, new() { Name = "groupingPanelHeight", Type = "number" }, new() { Name = "virtualHeight", Type = "number" }, new() { Name = "realScrollHeight", Type = "number" }, new() { Name = "topPanelHeight", Type = "number" }, new() { Name = "headerRowHeight", Type = "number" }, new() { Name = "footerRowHeight", Type = "number" }, new() { Name = "numVisibleRows", Type = "number" } ] },
        new() { Name = "ViewRange", IsInterface = true, Fields = [ new() { Name = "top", Type = "number" }, new() { Name = "bottom", Type = "number" }, new() { Name = "leftPx", Type = "number" }, new() { Name = "rightPx", Type = "number" } ] },
        new() { Name = "YesNoSelectCellEdit", BaseType = "BaseCellEdit", Fields = [ new() { Name = "_input", Type = "HTMLSelectElement" } ] },
    }
    .Select(x =>
    {
        x.Module = "@serenity-is/sleekgrid";
        x.SourceFile = "builtin:/node_modules/@serenity-is/sleekgrid/dist/index.d.ts";
        x.IsDeclaration ??= true;
        return x;
    }))
    .ToArray();
}