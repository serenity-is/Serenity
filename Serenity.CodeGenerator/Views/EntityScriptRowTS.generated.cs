#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Serenity.CodeGenerator.Views
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class EntityScriptRowTS : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden
 public dynamic Model { get; set; } 
        public override void Execute()
        {


WriteLiteral("\r\n");



                                                   
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var moduleDot = Model.Module == null ? "" : (Model.Module + ".");

    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };

    var fields = (IEnumerable<EntityCodeField>)Model.Fields;
    var joins = (IEnumerable<EntityCodeJoin>)Model.Joins;
    var fieldList = String.Join(", ", fields.Select(x => "'" + x.Ident + "'").Concat(joins.SelectMany(x => x.Fields.Select(y => "'" + jf(x.Name, y.Ident) + "'"))));


WriteLiteral("namespace ");


      Write(Model.RootNamespace);


                            Write(dotModule);

WriteLiteral(" {\r\n    export interface ");


                 Write(Model.RowClassName);


                                          WriteLiteral(" {");

                                             foreach (var x in Model.Fields) {

WriteLiteral("\r\n        ");


    Write(x.Ident);

WriteLiteral("?: ");


                 Write(x.TSType);

WriteLiteral(";");


                                        }


 foreach (var x in Model.Joins){foreach (var y in x.Fields){

WriteLiteral("\r\n        ");


    Write(jf(x.Name, y.Ident));

WriteLiteral("?: ");


                             Write(y.TSType);

WriteLiteral(";");


                                                    }}

WriteLiteral("\r\n    }\r\n\r\n    export namespace ");


                 Write(Model.RowClassName);


                                          WriteLiteral(" {");

                                             if (Model.Identity != null) {
WriteLiteral("\r\n        export const idProperty = \'");


                               Write(Model.Identity);

WriteLiteral("\';");


                                                             }

                                                               if (Model.NameField != null) {
WriteLiteral("\r\n        export const nameProperty = \'");


                                 Write(Model.NameField);

WriteLiteral("\';");


                                                                }

WriteLiteral("\r\n        export const localTextPrefix = \'");


                                   Write(moduleDot);


                                             Write(Model.ClassName);


                                                                  WriteLiteral("\';\r\n\r\n        export namespace Fields {");

                                  foreach (var x in Model.Fields) {

WriteLiteral("\r\n            export declare const ");


                            Write(x.Ident);

WriteLiteral(";");


                                                 }


 foreach (var x in Model.Joins){foreach (var y in x.Fields){

WriteLiteral("\r\n            export declare const ");


                             Write(jf(x.Name, y.Ident));

WriteLiteral(": string;");


                                                                       }}

WriteLiteral("\r\n        }\r\n\r\n        [");


    Write(fieldList);

WriteLiteral("].forEach(x => (<any>Fields)[x] = x);\r\n    }\r\n}\r\n\r\n");


        }
    }
}
#pragma warning restore 1591
