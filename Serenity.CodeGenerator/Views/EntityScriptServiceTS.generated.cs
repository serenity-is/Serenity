#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Serenity.CodeGenerator.Views
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class EntityScriptServiceTS : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden
 public dynamic Model { get; set; } 
        public override void Execute()
        {


WriteLiteral("\r\n");



                                                   
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var modulePrefix = (Model.Module == null ? "" : (Model.Module + "/"));

    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };

    var fields = (IEnumerable<EntityCodeField>)Model.Fields;
    var joins = (IEnumerable<EntityCodeJoin>)Model.Joins;
    var fieldList = String.Join(", ", fields.Select(x => "'" + x.Ident + "'").Concat(joins.SelectMany(x => x.Fields.Select(y => "'" + jf(x.Name, y.Ident) + "'"))));


WriteLiteral("\r\nnamespace ");


      Write(Model.RootNamespace);


                            Write(dotModule);

WriteLiteral(" {\r\n    export namespace ");


                 Write(Model.ClassName);

WriteLiteral("Service {\r\n        export const baseUrl = \'");


                            Write(modulePrefix);


                                           Write(Model.ClassName);

WriteLiteral("\';\r\n\r\n        export declare function Create(request: Serenity.SaveRequest<");


                                                                 Write(Model.RowClassName);

WriteLiteral(">, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Serenity.ServiceO" +
"ptions<any>): JQueryXHR;\r\n        export declare function Update(request: Sereni" +
"ty.SaveRequest<");


                                                                 Write(Model.RowClassName);

WriteLiteral(@">, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Serenity.ServiceOptions<any>): JQueryXHR;
        export declare function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Serenity.ServiceOptions<any>): JQueryXHR;
        export declare function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<");


                                                                                                                         Write(Model.RowClassName);

WriteLiteral(">) => void, opt?: Serenity.ServiceOptions<any>): JQueryXHR;\r\n        export decla" +
"re function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity." +
"ListResponse<");


                                                                                                             Write(Model.RowClassName);

WriteLiteral(@">) => void, opt?: Serenity.ServiceOptions<any>): JQueryXHR;

        export namespace Methods {
            export declare const Create: string;
            export declare const Update: string;
            export declare const Delete: string;
            export declare const Retrieve: string;
            export declare const List: string;
        }

        ['Create', 'Update', 'Delete', 'Retrieve', 'List'].forEach(x => {
            (<any>");


              Write(Model.ClassName);

WriteLiteral("Service)[x] = function (r, s, o) { return Q.serviceRequest(baseUrl + \'/\' + x, r, " +
"s, o); };\r\n            (<any>Methods)[x] = baseUrl + \'/\' + x;\r\n        });\r\n    " +
"}\r\n}");


        }
    }
}
#pragma warning restore 1591
