#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Serenity.CodeGenerator.Views
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class EntityRow : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden
 public dynamic Model { get; set; } 
        public override void Execute()
        {


WriteLiteral(Environment.NewLine);



                                                   
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var moduleDot = Model.Module == null ? "" : (Model.Module + ".");
    var schemaDot = Model.Schema == null ? "" : ("[" + Model.Schema + "].");
     
    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };


WriteLiteral("namespace ");


      Write(Model.RootNamespace);


                            Write(dotModule);

WriteLiteral(".Entities" + Environment.NewLine + "{" + Environment.NewLine + "    using Serenity;" + Environment.NewLine + "    using Serenity.ComponentModel;" + Environment.NewLine + "    using " +
"Serenity.Data;" + Environment.NewLine + "    using Serenity.Data.Mapping;" + Environment.NewLine + "    using System;" + Environment.NewLine + "    using S" +
"ystem.ComponentModel;" + Environment.NewLine + "    using System.IO;" + Environment.NewLine + Environment.NewLine + "    [ConnectionKey(\"");


               Write(Model.ConnectionKey);

WriteLiteral("\"), DisplayName(\"");


                                                    Write(Model.Tablename);

WriteLiteral("\"), InstanceName(\"");


                                                                                      Write(Model.Tablename);

WriteLiteral("\"), TwoLevelCached]" + Environment.NewLine + "    [ReadPermission(\"");


                Write(Model.Permission);

WriteLiteral("\")]" + Environment.NewLine + "    [ModifyPermission(\"");


                  Write(Model.Permission);

WriteLiteral("\")]" + Environment.NewLine + "    public sealed class ");


                   Write(Model.RowClassName);

WriteLiteral(" : ");


                                         Write(Model.RowBaseClass);

WriteLiteral(", IIdRow");


                                                                     Write(Model.IsLookup ? ", IDbLookupRow" : "");


                                                                                                              Write(Model.NameField == null ? "" : ", INameRow");


                                                                                                                                                                WriteLiteral(Environment.NewLine + "    {");

      foreach (EntityField x in Model.Fields) {
    var attrs = new List<string>();
    attrs.Add("DisplayName(\"" + x.Title + "\")");

    if (x.Ident != x.Name)
    {
        attrs.Add("Column(\"" + x.Name + "\")");
    }

    if ((x.Size ?? 0) != 0) {
        attrs.Add("Size(" + x.Size + ")");
    }
    if (x.Scale != 0) {
        attrs.Add("Scale(" + x.Scale + ")");
    }
    if (!String.IsNullOrEmpty(x.Flags)) {
        attrs.Add(x.Flags);
    }       
    if (!String.IsNullOrEmpty(x.PKTable)) {
        attrs.Add("ForeignKey(\"" + (string.IsNullOrEmpty(x.PKSchema) ? x.PKTable : ("[" + x.PKSchema + "].[" + x.PKTable + "]")) + "\", \"" + x.PKColumn + "\")");
        attrs.Add("LeftJoin(\"j" + x.ForeignJoinAlias + "\")");
    }
    if (Model.NameField == x.Ident) {
        attrs.Add("QuickSearch");
    }
    if (x.TextualField != null) {
        attrs.Add("TextualField(\"" + x.TextualField + "\")");
    }
    var attrString = String.Join(", ", attrs.ToArray());

WriteLiteral(Environment.NewLine);


 if (!String.IsNullOrEmpty(attrString)) {

WriteLiteral("        [");


          Write(attrString);

WriteLiteral("]" + Environment.NewLine);


       }
WriteLiteral("        public ");


                  Write(x.DataType);


                              Write(x.IsValueType ? "?" : "");

WriteLiteral(" ");


                                                         Write(x.Ident);

WriteLiteral(Environment.NewLine + "        {" + Environment.NewLine + "            get { return Fields.");


                            Write(x.Ident);

WriteLiteral("[this]; }" + Environment.NewLine + "            set { Fields.");


                     Write(x.Ident);

WriteLiteral("[this] = value; }" + Environment.NewLine + "        }" + Environment.NewLine);


       }


 foreach (EntityJoin x in Model.Joins){foreach (EntityField y in x.Fields){

WriteLiteral(Environment.NewLine + "        [DisplayName(\"");


                 Write(y.Title);

WriteLiteral("\"), Expression(\"");


                                          Write("j" + x.Name + ".[" + y.Name + "]");

WriteLiteral("\")]" + Environment.NewLine + "        public ");


          Write(y.DataType);


                      Write(y.IsValueType ? "?" : "");

WriteLiteral(" ");


                                                  Write(jf(x.Name, y.Ident));

WriteLiteral(Environment.NewLine + "        {" + Environment.NewLine + "            get { return Fields.");


                            Write(jf(x.Name, y.Ident));

WriteLiteral("[this]; }" + Environment.NewLine + "            set { Fields.");


                     Write(jf(x.Name, y.Ident));

WriteLiteral("[this] = value; }" + Environment.NewLine + "        }" + Environment.NewLine);


       }}

WriteLiteral(Environment.NewLine + "        IIdField IIdRow.IdField" + Environment.NewLine + "        {" + Environment.NewLine + "            get { return Fields.");


                            Write(Model.Identity);

WriteLiteral("; }" + Environment.NewLine + "        }" + Environment.NewLine);


 if (Model.NameField != null) {

WriteLiteral(Environment.NewLine + "        StringField INameRow.NameField" + Environment.NewLine + "        {" + Environment.NewLine + "            get { return Fie" +
"lds.");


                           Write(Model.NameField);

WriteLiteral("; }" + Environment.NewLine + "        }" + Environment.NewLine);


       }

WriteLiteral(Environment.NewLine + "        public static readonly RowFields Fields = new RowFields().Init();" + Environment.NewLine + Environment.NewLine + "  " +
"      public ");


           Write(Model.RowClassName);

WriteLiteral("()" + Environment.NewLine + "            : base(Fields)" + Environment.NewLine + "        {" + Environment.NewLine + "        }" + Environment.NewLine + Environment.NewLine + "        public class RowF" +
"ields : ");


                             Write(Model.FieldsBaseClass);


                                                         WriteLiteral(Environment.NewLine + "        {");

          foreach (EntityField x in Model.Fields) {

WriteLiteral(Environment.NewLine + "            public ");


               Write(x.FieldType);

WriteLiteral("Field ");


                                   Write(x.Ident);

WriteLiteral(";");


                                                         }


 foreach (EntityJoin x in Model.Joins) {
WriteLiteral(Environment.NewLine);


       foreach (EntityField y in x.Fields) {

WriteLiteral(Environment.NewLine + "            public ");


               Write(y.FieldType);

WriteLiteral("Field ");


                                   Write(jf(x.Name, y.Ident));

WriteLiteral(";");


                                                                     }}

WriteLiteral(Environment.NewLine + Environment.NewLine + "            public RowFields()" + Environment.NewLine + "                : base(\"");


                    Write(String.IsNullOrEmpty(schemaDot) ? Model.Tablename : schemaDot + "[" + Model.Tablename + "]");

WriteLiteral("\"");


                                                                                                                   Write(string.IsNullOrEmpty(Model.FieldPrefix) ? "" : (", \"" + Model.FieldPrefix + "\""));

WriteLiteral(")" + Environment.NewLine + "            {" + Environment.NewLine + "                LocalTextPrefix = \"");


                               Write(moduleDot);


                                           Write(Model.ClassName);

WriteLiteral("\";" + Environment.NewLine + "            }" + Environment.NewLine + "        }" + Environment.NewLine + "    }" + Environment.NewLine + "}" + Environment.NewLine);


        }
    }
}
#pragma warning restore 1591
